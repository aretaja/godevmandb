// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: archived_interfaces.sql

package godevmandb

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
)

const CountArchivedInterfaces = `-- name: CountArchivedInterfaces :one
SELECT COUNT(*)
FROM archived_interfaces
`

func (q *Queries) CountArchivedInterfaces(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountArchivedInterfaces)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateArchivedInterface = `-- name: CreateArchivedInterface :one
INSERT INTO archived_interfaces (
    ifindex,
    otn_if_id,
    cisco_opt_power_index,
    hostname,
    host_ip4,
    host_ip6,
    manufacturer,
    model,
    descr,
    alias,
    type_enum,
    mac
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12
  )
RETURNING ifa_id, ifindex, otn_if_id, cisco_opt_power_index, hostname, host_ip4, host_ip6, manufacturer, model, descr, alias, type_enum, mac, updated_on, created_on
`

type CreateArchivedInterfaceParams struct {
	Ifindex            sql.NullInt64  `json:"ifindex"`
	OtnIfID            sql.NullInt64  `json:"otn_if_id"`
	CiscoOptPowerIndex sql.NullString `json:"cisco_opt_power_index"`
	Hostname           string         `json:"hostname"`
	HostIp4            pgtype.Inet    `json:"host_ip4"`
	HostIp6            pgtype.Inet    `json:"host_ip6"`
	Manufacturer       string         `json:"manufacturer"`
	Model              string         `json:"model"`
	Descr              string         `json:"descr"`
	Alias              sql.NullString `json:"alias"`
	TypeEnum           sql.NullInt16  `json:"type_enum"`
	Mac                pgtype.Macaddr `json:"mac"`
}

func (q *Queries) CreateArchivedInterface(ctx context.Context, arg CreateArchivedInterfaceParams) (ArchivedInterface, error) {
	row := q.db.QueryRow(ctx, CreateArchivedInterface,
		arg.Ifindex,
		arg.OtnIfID,
		arg.CiscoOptPowerIndex,
		arg.Hostname,
		arg.HostIp4,
		arg.HostIp6,
		arg.Manufacturer,
		arg.Model,
		arg.Descr,
		arg.Alias,
		arg.TypeEnum,
		arg.Mac,
	)
	var i ArchivedInterface
	err := row.Scan(
		&i.IfaID,
		&i.Ifindex,
		&i.OtnIfID,
		&i.CiscoOptPowerIndex,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Manufacturer,
		&i.Model,
		&i.Descr,
		&i.Alias,
		&i.TypeEnum,
		&i.Mac,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteArchivedInterface = `-- name: DeleteArchivedInterface :exec
DELETE FROM archived_interfaces
WHERE ifa_id = $1
`

func (q *Queries) DeleteArchivedInterface(ctx context.Context, ifaID int64) error {
	_, err := q.db.Exec(ctx, DeleteArchivedInterface, ifaID)
	return err
}

const GetArchivedInterface = `-- name: GetArchivedInterface :one
SELECT ifa_id, ifindex, otn_if_id, cisco_opt_power_index, hostname, host_ip4, host_ip6, manufacturer, model, descr, alias, type_enum, mac, updated_on, created_on
FROM archived_interfaces
WHERE ifa_id = $1
`

func (q *Queries) GetArchivedInterface(ctx context.Context, ifaID int64) (ArchivedInterface, error) {
	row := q.db.QueryRow(ctx, GetArchivedInterface, ifaID)
	var i ArchivedInterface
	err := row.Scan(
		&i.IfaID,
		&i.Ifindex,
		&i.OtnIfID,
		&i.CiscoOptPowerIndex,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Manufacturer,
		&i.Model,
		&i.Descr,
		&i.Alias,
		&i.TypeEnum,
		&i.Mac,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetArchivedInterfaces = `-- name: GetArchivedInterfaces :many
SELECT ifa_id, ifindex, otn_if_id, cisco_opt_power_index, hostname, host_ip4, host_ip6, manufacturer, model, descr, alias, type_enum, mac, updated_on, created_on
FROM archived_interfaces
WHERE (
    $1::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on >= $1
  )
  AND (
    $2::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on <= $2
  )
  AND (
    $3::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on >= $3
  )
  AND (
    $4::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on <= $4
  )
  AND (
    $5::text IS NULL
    OR CAST(ifindex AS text) LIKE $5
  )
  AND (
    $6::text = ''
    OR hostname ILIKE $6
  )
  AND (
    $7::inet IS NULL
    OR host_ip4 <<= $7
  )
  AND (
    $8::inet IS NULL
    OR host_ip6 <<= $8
  )
  AND (
    $9::text = ''
    OR descr ILIKE $9
  )
  AND (
    $10::text IS NULL
    OR alias ILIKE $10
  )
  AND (
    $11::macaddr IS NULL
    OR mac = $11
  )
ORDER BY created_on
LIMIT NULLIF($13::int, 0) OFFSET NULLIF($12::int, 0)
`

type GetArchivedInterfacesParams struct {
	UpdatedGe time.Time      `json:"updated_ge"`
	UpdatedLe time.Time      `json:"updated_le"`
	CreatedGe time.Time      `json:"created_ge"`
	CreatedLe time.Time      `json:"created_le"`
	IfindexF  sql.NullString `json:"ifindex_f"`
	HostnameF string         `json:"hostname_f"`
	HostIp4F  pgtype.Inet    `json:"host_ip4_f"`
	HostIp6F  pgtype.Inet    `json:"host_ip6_f"`
	DescrF    string         `json:"descr_f"`
	AliasF    sql.NullString `json:"alias_f"`
	MacF      pgtype.Macaddr `json:"mac_f"`
	OffsetQ   int32          `json:"offset_q"`
	LimitQ    int32          `json:"limit_q"`
}

func (q *Queries) GetArchivedInterfaces(ctx context.Context, arg GetArchivedInterfacesParams) ([]ArchivedInterface, error) {
	rows, err := q.db.Query(ctx, GetArchivedInterfaces,
		arg.UpdatedGe,
		arg.UpdatedLe,
		arg.CreatedGe,
		arg.CreatedLe,
		arg.IfindexF,
		arg.HostnameF,
		arg.HostIp4F,
		arg.HostIp6F,
		arg.DescrF,
		arg.AliasF,
		arg.MacF,
		arg.OffsetQ,
		arg.LimitQ,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArchivedInterface
	for rows.Next() {
		var i ArchivedInterface
		if err := rows.Scan(
			&i.IfaID,
			&i.Ifindex,
			&i.OtnIfID,
			&i.CiscoOptPowerIndex,
			&i.Hostname,
			&i.HostIp4,
			&i.HostIp6,
			&i.Manufacturer,
			&i.Model,
			&i.Descr,
			&i.Alias,
			&i.TypeEnum,
			&i.Mac,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateArchivedInterface = `-- name: UpdateArchivedInterface :one
UPDATE archived_interfaces
SET ifindex = $2,
  otn_if_id = $3,
  cisco_opt_power_index = $4,
  hostname = $5,
  host_ip4 = $6,
  host_ip6 = $7,
  manufacturer = $8,
  model = $9,
  descr = $10,
  alias = $11,
  type_enum = $12,
  mac = $13
WHERE ifa_id = $1
RETURNING ifa_id, ifindex, otn_if_id, cisco_opt_power_index, hostname, host_ip4, host_ip6, manufacturer, model, descr, alias, type_enum, mac, updated_on, created_on
`

type UpdateArchivedInterfaceParams struct {
	IfaID              int64          `json:"ifa_id"`
	Ifindex            sql.NullInt64  `json:"ifindex"`
	OtnIfID            sql.NullInt64  `json:"otn_if_id"`
	CiscoOptPowerIndex sql.NullString `json:"cisco_opt_power_index"`
	Hostname           string         `json:"hostname"`
	HostIp4            pgtype.Inet    `json:"host_ip4"`
	HostIp6            pgtype.Inet    `json:"host_ip6"`
	Manufacturer       string         `json:"manufacturer"`
	Model              string         `json:"model"`
	Descr              string         `json:"descr"`
	Alias              sql.NullString `json:"alias"`
	TypeEnum           sql.NullInt16  `json:"type_enum"`
	Mac                pgtype.Macaddr `json:"mac"`
}

func (q *Queries) UpdateArchivedInterface(ctx context.Context, arg UpdateArchivedInterfaceParams) (ArchivedInterface, error) {
	row := q.db.QueryRow(ctx, UpdateArchivedInterface,
		arg.IfaID,
		arg.Ifindex,
		arg.OtnIfID,
		arg.CiscoOptPowerIndex,
		arg.Hostname,
		arg.HostIp4,
		arg.HostIp6,
		arg.Manufacturer,
		arg.Model,
		arg.Descr,
		arg.Alias,
		arg.TypeEnum,
		arg.Mac,
	)
	var i ArchivedInterface
	err := row.Scan(
		&i.IfaID,
		&i.Ifindex,
		&i.OtnIfID,
		&i.CiscoOptPowerIndex,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Manufacturer,
		&i.Model,
		&i.Descr,
		&i.Alias,
		&i.TypeEnum,
		&i.Mac,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
