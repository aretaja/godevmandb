// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: rl_nbrs.sql

package godevmandb

import (
	"context"
	"time"
)

const CountRlNbrs = `-- name: CountRlNbrs :one
SELECT COUNT(*)
FROM rl_nbrs
`

func (q *Queries) CountRlNbrs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountRlNbrs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateRlNbr = `-- name: CreateRlNbr :one
INSERT INTO rl_nbrs (
        dev_id,
        nbr_ent_id,
        nbr_sysname
    )
VALUES ($1, $2, $3)
RETURNING nbr_id, dev_id, nbr_ent_id, nbr_sysname, updated_on, created_on
`

type CreateRlNbrParams struct {
	DevID      int64  `json:"dev_id"`
	NbrEntID   *int64 `json:"nbr_ent_id"`
	NbrSysname string `json:"nbr_sysname"`
}

func (q *Queries) CreateRlNbr(ctx context.Context, arg CreateRlNbrParams) (RlNbr, error) {
	row := q.db.QueryRow(ctx, CreateRlNbr, arg.DevID, arg.NbrEntID, arg.NbrSysname)
	var i RlNbr
	err := row.Scan(
		&i.NbrID,
		&i.DevID,
		&i.NbrEntID,
		&i.NbrSysname,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteRlNbr = `-- name: DeleteRlNbr :exec
DELETE FROM rl_nbrs
WHERE nbr_id = $1
`

func (q *Queries) DeleteRlNbr(ctx context.Context, nbrID int64) error {
	_, err := q.db.Exec(ctx, DeleteRlNbr, nbrID)
	return err
}

const GetRlNbr = `-- name: GetRlNbr :one
SELECT nbr_id, dev_id, nbr_ent_id, nbr_sysname, updated_on, created_on
FROM rl_nbrs
WHERE nbr_id = $1
`

func (q *Queries) GetRlNbr(ctx context.Context, nbrID int64) (RlNbr, error) {
	row := q.db.QueryRow(ctx, GetRlNbr, nbrID)
	var i RlNbr
	err := row.Scan(
		&i.NbrID,
		&i.DevID,
		&i.NbrEntID,
		&i.NbrSysname,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetRlNbrDevice = `-- name: GetRlNbrDevice :one
SELECT t2.dev_id, t2.site_id, t2.dom_id, t2.snmp_main_id, t2.snmp_ro_id, t2.parent, t2.sys_id, t2.ip4_addr, t2.ip6_addr, t2.host_name, t2.sys_name, t2.sys_location, t2.sys_contact, t2.sw_version, t2.ext_model, t2.installed, t2.monitor, t2.graph, t2.backup, t2.source, t2.type_changed, t2.backup_failed, t2.validation_failed, t2.unresponsive, t2.notes, t2.updated_on, t2.created_on
FROM rl_nbrs t1
    INNER JOIN devices t2 ON t2.dev_id = t1.dev_id
WHERE t1.nbr_id = $1
`

// Foreign keys
func (q *Queries) GetRlNbrDevice(ctx context.Context, nbrID int64) (Device, error) {
	row := q.db.QueryRow(ctx, GetRlNbrDevice, nbrID)
	var i Device
	err := row.Scan(
		&i.DevID,
		&i.SiteID,
		&i.DomID,
		&i.SnmpMainID,
		&i.SnmpRoID,
		&i.Parent,
		&i.SysID,
		&i.Ip4Addr,
		&i.Ip6Addr,
		&i.HostName,
		&i.SysName,
		&i.SysLocation,
		&i.SysContact,
		&i.SwVersion,
		&i.ExtModel,
		&i.Installed,
		&i.Monitor,
		&i.Graph,
		&i.Backup,
		&i.Source,
		&i.TypeChanged,
		&i.BackupFailed,
		&i.ValidationFailed,
		&i.Unresponsive,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetRlNbrEntity = `-- name: GetRlNbrEntity :one
SELECT t2.ent_id, t2.parent_ent_id, t2.snmp_ent_id, t2.dev_id, t2.slot, t2.descr, t2.model, t2.hw_product, t2.hw_revision, t2.serial_nr, t2.sw_product, t2.sw_revision, t2.manufacturer, t2.physical, t2.updated_on, t2.created_on
FROM rl_nbrs t1
    INNER JOIN entities t2 ON t2.ent_id = t1.nbr_ent_id
WHERE t1.nbr_id = $1
`

// Foreign keys
func (q *Queries) GetRlNbrEntity(ctx context.Context, nbrID int64) (Entity, error) {
	row := q.db.QueryRow(ctx, GetRlNbrEntity, nbrID)
	var i Entity
	err := row.Scan(
		&i.EntID,
		&i.ParentEntID,
		&i.SnmpEntID,
		&i.DevID,
		&i.Slot,
		&i.Descr,
		&i.Model,
		&i.HwProduct,
		&i.HwRevision,
		&i.SerialNr,
		&i.SwProduct,
		&i.SwRevision,
		&i.Manufacturer,
		&i.Physical,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetRlNbrs = `-- name: GetRlNbrs :many
SELECT nbr_id, dev_id, nbr_ent_id, nbr_sysname, updated_on, created_on
FROM rl_nbrs
WHERE (
    $1::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on >= $1
  )
  AND (
    $2::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on <= $2
  )
  AND (
    $3::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on >= $3
  )
  AND (
    $4::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on <= $4
  )
  AND (
    $5::text = ''
    OR nbr_sysname ILIKE $5
  )
ORDER BY created_on
LIMIT NULLIF($7::int, 0) OFFSET NULLIF($6::int, 0)
`

type GetRlNbrsParams struct {
	UpdatedGe   time.Time `json:"updated_ge"`
	UpdatedLe   time.Time `json:"updated_le"`
	CreatedGe   time.Time `json:"created_ge"`
	CreatedLe   time.Time `json:"created_le"`
	NbrSysnameF string    `json:"nbr_sysname_f"`
	OffsetQ     int32     `json:"offset_q"`
	LimitQ      int32     `json:"limit_q"`
}

func (q *Queries) GetRlNbrs(ctx context.Context, arg GetRlNbrsParams) ([]RlNbr, error) {
	rows, err := q.db.Query(ctx, GetRlNbrs,
		arg.UpdatedGe,
		arg.UpdatedLe,
		arg.CreatedGe,
		arg.CreatedLe,
		arg.NbrSysnameF,
		arg.OffsetQ,
		arg.LimitQ,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RlNbr
	for rows.Next() {
		var i RlNbr
		if err := rows.Scan(
			&i.NbrID,
			&i.DevID,
			&i.NbrEntID,
			&i.NbrSysname,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateRlNbr = `-- name: UpdateRlNbr :one
UPDATE rl_nbrs
SET dev_id = $2,
    nbr_ent_id = $3,
    nbr_sysname = $4
WHERE nbr_id = $1
RETURNING nbr_id, dev_id, nbr_ent_id, nbr_sysname, updated_on, created_on
`

type UpdateRlNbrParams struct {
	NbrID      int64  `json:"nbr_id"`
	DevID      int64  `json:"dev_id"`
	NbrEntID   *int64 `json:"nbr_ent_id"`
	NbrSysname string `json:"nbr_sysname"`
}

func (q *Queries) UpdateRlNbr(ctx context.Context, arg UpdateRlNbrParams) (RlNbr, error) {
	row := q.db.QueryRow(ctx, UpdateRlNbr,
		arg.NbrID,
		arg.DevID,
		arg.NbrEntID,
		arg.NbrSysname,
	)
	var i RlNbr
	err := row.Scan(
		&i.NbrID,
		&i.DevID,
		&i.NbrEntID,
		&i.NbrSysname,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
