// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: ip_interfaces.sql

package godevmandb

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const CountIpInterfaces = `-- name: CountIpInterfaces :one
SELECT COUNT(*)
FROM ip_interfaces
`

func (q *Queries) CountIpInterfaces(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountIpInterfaces)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateIpInterface = `-- name: CreateIpInterface :one
INSERT INTO ip_interfaces (
        dev_id,
        ifindex,
        ip_addr,
        descr,
        alias
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING ip_id, dev_id, ifindex, ip_addr, descr, alias, updated_on, created_on
`

type CreateIpInterfaceParams struct {
	DevID   int64          `json:"dev_id"`
	Ifindex sql.NullInt64  `json:"ifindex"`
	IpAddr  pgtype.Inet    `json:"ip_addr"`
	Descr   sql.NullString `json:"descr"`
	Alias   sql.NullString `json:"alias"`
}

func (q *Queries) CreateIpInterface(ctx context.Context, arg CreateIpInterfaceParams) (IpInterface, error) {
	row := q.db.QueryRow(ctx, CreateIpInterface,
		arg.DevID,
		arg.Ifindex,
		arg.IpAddr,
		arg.Descr,
		arg.Alias,
	)
	var i IpInterface
	err := row.Scan(
		&i.IpID,
		&i.DevID,
		&i.Ifindex,
		&i.IpAddr,
		&i.Descr,
		&i.Alias,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteIpInterface = `-- name: DeleteIpInterface :exec
DELETE FROM ip_interfaces
WHERE ip_id = $1
`

func (q *Queries) DeleteIpInterface(ctx context.Context, ipID int64) error {
	_, err := q.db.Exec(ctx, DeleteIpInterface, ipID)
	return err
}

const GetIpInterface = `-- name: GetIpInterface :one
SELECT ip_id, dev_id, ifindex, ip_addr, descr, alias, updated_on, created_on
FROM ip_interfaces
WHERE ip_id = $1
`

func (q *Queries) GetIpInterface(ctx context.Context, ipID int64) (IpInterface, error) {
	row := q.db.QueryRow(ctx, GetIpInterface, ipID)
	var i IpInterface
	err := row.Scan(
		&i.IpID,
		&i.DevID,
		&i.Ifindex,
		&i.IpAddr,
		&i.Descr,
		&i.Alias,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetIpInterfaceDevice = `-- name: GetIpInterfaceDevice :one
SELECT t2.dev_id, t2.site_id, t2.dom_id, t2.snmp_main_id, t2.snmp_ro_id, t2.parent, t2.sys_id, t2.ip4_addr, t2.ip6_addr, t2.host_name, t2.sys_name, t2.sys_location, t2.sys_contact, t2.sw_version, t2.ext_model, t2.installed, t2.monitor, t2.graph, t2.backup, t2.source, t2.type_changed, t2.backup_failed, t2.validation_failed, t2.unresponsive, t2.notes, t2.updated_on, t2.created_on
FROM ip_interfaces t1
    INNER JOIN devices t2 ON t2.dev_id = t1.dev_id
WHERE t1.ip_id = $1
`

// Foreign keys
func (q *Queries) GetIpInterfaceDevice(ctx context.Context, ipID int64) (Device, error) {
	row := q.db.QueryRow(ctx, GetIpInterfaceDevice, ipID)
	var i Device
	err := row.Scan(
		&i.DevID,
		&i.SiteID,
		&i.DomID,
		&i.SnmpMainID,
		&i.SnmpRoID,
		&i.Parent,
		&i.SysID,
		&i.Ip4Addr,
		&i.Ip6Addr,
		&i.HostName,
		&i.SysName,
		&i.SysLocation,
		&i.SysContact,
		&i.SwVersion,
		&i.ExtModel,
		&i.Installed,
		&i.Monitor,
		&i.Graph,
		&i.Backup,
		&i.Source,
		&i.TypeChanged,
		&i.BackupFailed,
		&i.ValidationFailed,
		&i.Unresponsive,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetIpInterfaces = `-- name: GetIpInterfaces :many
SELECT ip_id, dev_id, ifindex, ip_addr, descr, alias, updated_on, created_on
FROM ip_interfaces
ORDER BY dev_id, descr
LIMIT $1
OFFSET $2
`

type GetIpInterfacesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetIpInterfaces(ctx context.Context, arg GetIpInterfacesParams) ([]IpInterface, error) {
	rows, err := q.db.Query(ctx, GetIpInterfaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IpInterface
	for rows.Next() {
		var i IpInterface
		if err := rows.Scan(
			&i.IpID,
			&i.DevID,
			&i.Ifindex,
			&i.IpAddr,
			&i.Descr,
			&i.Alias,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateIpInterface = `-- name: UpdateIpInterface :one
UPDATE ip_interfaces
SET dev_id = $2,
    ifindex = $3,
    ip_addr = $4,
    descr = $5,
    alias = $6
WHERE ip_id = $1
RETURNING ip_id, dev_id, ifindex, ip_addr, descr, alias, updated_on, created_on
`

type UpdateIpInterfaceParams struct {
	IpID    int64          `json:"ip_id"`
	DevID   int64          `json:"dev_id"`
	Ifindex sql.NullInt64  `json:"ifindex"`
	IpAddr  pgtype.Inet    `json:"ip_addr"`
	Descr   sql.NullString `json:"descr"`
	Alias   sql.NullString `json:"alias"`
}

func (q *Queries) UpdateIpInterface(ctx context.Context, arg UpdateIpInterfaceParams) (IpInterface, error) {
	row := q.db.QueryRow(ctx, UpdateIpInterface,
		arg.IpID,
		arg.DevID,
		arg.Ifindex,
		arg.IpAddr,
		arg.Descr,
		arg.Alias,
	)
	var i IpInterface
	err := row.Scan(
		&i.IpID,
		&i.DevID,
		&i.Ifindex,
		&i.IpAddr,
		&i.Descr,
		&i.Alias,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
