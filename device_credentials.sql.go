// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: device_credentials.sql

package godevmandb

import (
	"context"
	"time"
)

const CountDeviceCredentials = `-- name: CountDeviceCredentials :one
SELECT COUNT(*)
FROM device_credentials
`

func (q *Queries) CountDeviceCredentials(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountDeviceCredentials)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateDeviceCredential = `-- name: CreateDeviceCredential :one
INSERT INTO device_credentials (dev_id, username, enc_secret)
VALUES ($1, $2, $3)
RETURNING cred_id, dev_id, username, enc_secret, updated_on, created_on
`

type CreateDeviceCredentialParams struct {
	DevID     int64  `json:"dev_id"`
	Username  string `json:"username"`
	EncSecret string `json:"enc_secret"`
}

func (q *Queries) CreateDeviceCredential(ctx context.Context, arg CreateDeviceCredentialParams) (DeviceCredential, error) {
	row := q.db.QueryRow(ctx, CreateDeviceCredential, arg.DevID, arg.Username, arg.EncSecret)
	var i DeviceCredential
	err := row.Scan(
		&i.CredID,
		&i.DevID,
		&i.Username,
		&i.EncSecret,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteDeviceCredential = `-- name: DeleteDeviceCredential :exec
DELETE FROM device_credentials
WHERE cred_id = $1
`

func (q *Queries) DeleteDeviceCredential(ctx context.Context, credID int64) error {
	_, err := q.db.Exec(ctx, DeleteDeviceCredential, credID)
	return err
}

const GetDeviceCredential = `-- name: GetDeviceCredential :one
SELECT cred_id, dev_id, username, enc_secret, updated_on, created_on
FROM device_credentials
WHERE cred_id = $1
`

func (q *Queries) GetDeviceCredential(ctx context.Context, credID int64) (DeviceCredential, error) {
	row := q.db.QueryRow(ctx, GetDeviceCredential, credID)
	var i DeviceCredential
	err := row.Scan(
		&i.CredID,
		&i.DevID,
		&i.Username,
		&i.EncSecret,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetDeviceCredentialDevice = `-- name: GetDeviceCredentialDevice :one
SELECT t2.dev_id, t2.site_id, t2.dom_id, t2.snmp_main_id, t2.snmp_ro_id, t2.parent, t2.sys_id, t2.ip4_addr, t2.ip6_addr, t2.host_name, t2.sys_name, t2.sys_location, t2.sys_contact, t2.sw_version, t2.ext_model, t2.installed, t2.monitor, t2.graph, t2.backup, t2.source, t2.type_changed, t2.backup_failed, t2.validation_failed, t2.unresponsive, t2.notes, t2.updated_on, t2.created_on
FROM device_credentials t1
  INNER JOIN devices t2 ON t2.dev_id = t1.dev_id
WHERE t1.cred_id = $1
`

// Foreign keys
func (q *Queries) GetDeviceCredentialDevice(ctx context.Context, credID int64) (Device, error) {
	row := q.db.QueryRow(ctx, GetDeviceCredentialDevice, credID)
	var i Device
	err := row.Scan(
		&i.DevID,
		&i.SiteID,
		&i.DomID,
		&i.SnmpMainID,
		&i.SnmpRoID,
		&i.Parent,
		&i.SysID,
		&i.Ip4Addr,
		&i.Ip6Addr,
		&i.HostName,
		&i.SysName,
		&i.SysLocation,
		&i.SysContact,
		&i.SwVersion,
		&i.ExtModel,
		&i.Installed,
		&i.Monitor,
		&i.Graph,
		&i.Backup,
		&i.Source,
		&i.TypeChanged,
		&i.BackupFailed,
		&i.ValidationFailed,
		&i.Unresponsive,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetDeviceCredentials = `-- name: GetDeviceCredentials :many
SELECT cred_id, dev_id, username, enc_secret, updated_on, created_on
FROM device_credentials
WHERE (
    $1::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on >= $1
  )
  AND (
    $2::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on <= $2
  )
  AND (
    $3::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on >= $3
  )
  AND (
    $4::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on <= $4
  )
  AND (
    $5::text = ''
    OR username ILIKE $5
  )
ORDER BY created_on
LIMIT NULLIF($7::int, 0) OFFSET NULLIF($6::int, 0)
`

type GetDeviceCredentialsParams struct {
	UpdatedGe time.Time `json:"updated_ge"`
	UpdatedLe time.Time `json:"updated_le"`
	CreatedGe time.Time `json:"created_ge"`
	CreatedLe time.Time `json:"created_le"`
	UsernameF string    `json:"username_f"`
	OffsetQ   int32     `json:"offset_q"`
	LimitQ    int32     `json:"limit_q"`
}

func (q *Queries) GetDeviceCredentials(ctx context.Context, arg GetDeviceCredentialsParams) ([]DeviceCredential, error) {
	rows, err := q.db.Query(ctx, GetDeviceCredentials,
		arg.UpdatedGe,
		arg.UpdatedLe,
		arg.CreatedGe,
		arg.CreatedLe,
		arg.UsernameF,
		arg.OffsetQ,
		arg.LimitQ,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceCredential
	for rows.Next() {
		var i DeviceCredential
		if err := rows.Scan(
			&i.CredID,
			&i.DevID,
			&i.Username,
			&i.EncSecret,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateDeviceCredential = `-- name: UpdateDeviceCredential :one
UPDATE device_credentials
SET dev_id = $2,
  username = $3,
  enc_secret = $4
WHERE cred_id = $1
RETURNING cred_id, dev_id, username, enc_secret, updated_on, created_on
`

type UpdateDeviceCredentialParams struct {
	CredID    int64  `json:"cred_id"`
	DevID     int64  `json:"dev_id"`
	Username  string `json:"username"`
	EncSecret string `json:"enc_secret"`
}

func (q *Queries) UpdateDeviceCredential(ctx context.Context, arg UpdateDeviceCredentialParams) (DeviceCredential, error) {
	row := q.db.QueryRow(ctx, UpdateDeviceCredential,
		arg.CredID,
		arg.DevID,
		arg.Username,
		arg.EncSecret,
	)
	var i DeviceCredential
	err := row.Scan(
		&i.CredID,
		&i.DevID,
		&i.Username,
		&i.EncSecret,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
