// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: credentials.sql

package godevmandb

import (
	"context"
	"database/sql"
)

const CountCredentials = `-- name: CountCredentials :one
SELECT COUNT(*)
FROM credentials
`

func (q *Queries) CountCredentials(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountCredentials)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateCredential = `-- name: CreateCredential :one
INSERT INTO credentials (label, username, enc_secret)
VALUES ($1, $2, $3)
RETURNING cred_id, label, username, enc_secret, updated_on, created_on
`

type CreateCredentialParams struct {
	Label     string         `json:"label"`
	Username  sql.NullString `json:"username"`
	EncSecret string         `json:"enc_secret"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, CreateCredential, arg.Label, arg.Username, arg.EncSecret)
	var i Credential
	err := row.Scan(
		&i.CredID,
		&i.Label,
		&i.Username,
		&i.EncSecret,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteCredential = `-- name: DeleteCredential :exec
DELETE FROM credentials
WHERE cred_id = $1
`

func (q *Queries) DeleteCredential(ctx context.Context, credID int64) error {
	_, err := q.db.Exec(ctx, DeleteCredential, credID)
	return err
}

const GetCredential = `-- name: GetCredential :one
SELECT cred_id, label, username, enc_secret, updated_on, created_on
FROM credentials
WHERE cred_id = $1
`

func (q *Queries) GetCredential(ctx context.Context, credID int64) (Credential, error) {
	row := q.db.QueryRow(ctx, GetCredential, credID)
	var i Credential
	err := row.Scan(
		&i.CredID,
		&i.Label,
		&i.Username,
		&i.EncSecret,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetCredentials = `-- name: GetCredentials :many
SELECT cred_id, label, username, enc_secret, updated_on, created_on
FROM credentials
ORDER BY label
`

func (q *Queries) GetCredentials(ctx context.Context) ([]Credential, error) {
	rows, err := q.db.Query(ctx, GetCredentials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.CredID,
			&i.Label,
			&i.Username,
			&i.EncSecret,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCredential = `-- name: UpdateCredential :one
UPDATE credentials
SET label = $2,
  username = $3,
  enc_secret = $4
WHERE cred_id = $1
RETURNING cred_id, label, username, enc_secret, updated_on, created_on
`

type UpdateCredentialParams struct {
	CredID    int64          `json:"cred_id"`
	Label     string         `json:"label"`
	Username  sql.NullString `json:"username"`
	EncSecret string         `json:"enc_secret"`
}

func (q *Queries) UpdateCredential(ctx context.Context, arg UpdateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, UpdateCredential,
		arg.CredID,
		arg.Label,
		arg.Username,
		arg.EncSecret,
	)
	var i Credential
	err := row.Scan(
		&i.CredID,
		&i.Label,
		&i.Username,
		&i.EncSecret,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
