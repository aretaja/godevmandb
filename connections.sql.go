// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: connections.sql

package godevmandb

import (
	"context"
	"database/sql"
)

const CountConnections = `-- name: CountConnections :one
SELECT COUNT(*)
FROM connections
`

func (q *Queries) CountConnections(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountConnections)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateConnection = `-- name: CreateConnection :one
INSERT INTO connections (
    site_id,
    con_prov_id,
    con_type_id,
    con_cap_id,
    con_class_id,
    hint,
    notes,
    in_use
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING con_id, site_id, con_prov_id, con_type_id, con_cap_id, con_class_id, hint, notes, in_use, updated_on, created_on
`

type CreateConnectionParams struct {
	SiteID     int64          `json:"site_id"`
	ConProvID  int64          `json:"con_prov_id"`
	ConTypeID  int64          `json:"con_type_id"`
	ConCapID   int64          `json:"con_cap_id"`
	ConClassID int64          `json:"con_class_id"`
	Hint       sql.NullString `json:"hint"`
	Notes      sql.NullString `json:"notes"`
	InUse      bool           `json:"in_use"`
}

func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) (Connection, error) {
	row := q.db.QueryRow(ctx, CreateConnection,
		arg.SiteID,
		arg.ConProvID,
		arg.ConTypeID,
		arg.ConCapID,
		arg.ConClassID,
		arg.Hint,
		arg.Notes,
		arg.InUse,
	)
	var i Connection
	err := row.Scan(
		&i.ConID,
		&i.SiteID,
		&i.ConProvID,
		&i.ConTypeID,
		&i.ConCapID,
		&i.ConClassID,
		&i.Hint,
		&i.Notes,
		&i.InUse,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteConnection = `-- name: DeleteConnection :exec
DELETE FROM connections
WHERE con_id = $1
`

func (q *Queries) DeleteConnection(ctx context.Context, conID int64) error {
	_, err := q.db.Exec(ctx, DeleteConnection, conID)
	return err
}

const GetConnection = `-- name: GetConnection :one
SELECT con_id, site_id, con_prov_id, con_type_id, con_cap_id, con_class_id, hint, notes, in_use, updated_on, created_on
FROM connections
WHERE con_id = $1
`

func (q *Queries) GetConnection(ctx context.Context, conID int64) (Connection, error) {
	row := q.db.QueryRow(ctx, GetConnection, conID)
	var i Connection
	err := row.Scan(
		&i.ConID,
		&i.SiteID,
		&i.ConProvID,
		&i.ConTypeID,
		&i.ConCapID,
		&i.ConClassID,
		&i.Hint,
		&i.Notes,
		&i.InUse,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetConnectionConCapacitiy = `-- name: GetConnectionConCapacitiy :one
SELECT t2.con_cap_id, t2.descr, t2.notes, t2.updated_on, t2.created_on
FROM connections t1
  INNER JOIN con_capacities t2 ON t2.con_cap_id = t1.con_cap_id
WHERE t1.con_id = $1
`

func (q *Queries) GetConnectionConCapacitiy(ctx context.Context, conID int64) (ConCapacity, error) {
	row := q.db.QueryRow(ctx, GetConnectionConCapacitiy, conID)
	var i ConCapacity
	err := row.Scan(
		&i.ConCapID,
		&i.Descr,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetConnectionConClass = `-- name: GetConnectionConClass :one
SELECT t2.con_class_id, t2.descr, t2.notes, t2.updated_on, t2.created_on
FROM connections t1
  INNER JOIN con_classes t2 ON t2.con_class_id = t1.con_class_id
WHERE t1.con_id = $1
`

func (q *Queries) GetConnectionConClass(ctx context.Context, conID int64) (ConClass, error) {
	row := q.db.QueryRow(ctx, GetConnectionConClass, conID)
	var i ConClass
	err := row.Scan(
		&i.ConClassID,
		&i.Descr,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetConnectionConProvider = `-- name: GetConnectionConProvider :one
SELECT t2.con_prov_id, t2.descr, t2.notes, t2.updated_on, t2.created_on
FROM connections t1
  INNER JOIN con_providers t2 ON t2.con_prov_id = t1.con_prov_id
WHERE t1.con_id = $1
`

func (q *Queries) GetConnectionConProvider(ctx context.Context, conID int64) (ConProvider, error) {
	row := q.db.QueryRow(ctx, GetConnectionConProvider, conID)
	var i ConProvider
	err := row.Scan(
		&i.ConProvID,
		&i.Descr,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetConnectionConType = `-- name: GetConnectionConType :one
SELECT t2.con_type_id, t2.descr, t2.notes, t2.updated_on, t2.created_on
FROM connections t1
  INNER JOIN con_types t2 ON t2.con_type_id = t1.con_type_id
WHERE t1.con_id = $1
`

func (q *Queries) GetConnectionConType(ctx context.Context, conID int64) (ConType, error) {
	row := q.db.QueryRow(ctx, GetConnectionConType, conID)
	var i ConType
	err := row.Scan(
		&i.ConTypeID,
		&i.Descr,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetConnectionInterfaces = `-- name: GetConnectionInterfaces :many
SELECT if_id, con_id, parent, otn_if_id, dev_id, ent_id, ifindex, descr, alias, oper, adm, speed, minspeed, type_enum, mac, monstatus, monerrors, monload, updated_on, created_on, montraffic
FROM interfaces
WHERE con_id = $1
`

// Relations
func (q *Queries) GetConnectionInterfaces(ctx context.Context, conID sql.NullInt64) ([]Interface, error) {
	rows, err := q.db.Query(ctx, GetConnectionInterfaces, conID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Interface
	for rows.Next() {
		var i Interface
		if err := rows.Scan(
			&i.IfID,
			&i.ConID,
			&i.Parent,
			&i.OtnIfID,
			&i.DevID,
			&i.EntID,
			&i.Ifindex,
			&i.Descr,
			&i.Alias,
			&i.Oper,
			&i.Adm,
			&i.Speed,
			&i.Minspeed,
			&i.TypeEnum,
			&i.Mac,
			&i.Monstatus,
			&i.Monerrors,
			&i.Monload,
			&i.UpdatedOn,
			&i.CreatedOn,
			&i.Montraffic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetConnectionSite = `-- name: GetConnectionSite :one
SELECT t2.site_id, t2.country_id, t2.uident, t2.descr, t2.latitude, t2.longitude, t2.area, t2.addr, t2.notes, t2.ext_id, t2.ext_name, t2.updated_on, t2.created_on
FROM connections t1
  INNER JOIN sites t2 ON t2.site_id = t1.site_id
WHERE t1.con_id = $1
`

// Foreign keys
func (q *Queries) GetConnectionSite(ctx context.Context, conID int64) (Site, error) {
	row := q.db.QueryRow(ctx, GetConnectionSite, conID)
	var i Site
	err := row.Scan(
		&i.SiteID,
		&i.CountryID,
		&i.Uident,
		&i.Descr,
		&i.Latitude,
		&i.Longitude,
		&i.Area,
		&i.Addr,
		&i.Notes,
		&i.ExtID,
		&i.ExtName,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetConnections = `-- name: GetConnections :many
SELECT con_id, site_id, con_prov_id, con_type_id, con_cap_id, con_class_id, hint, notes, in_use, updated_on, created_on
FROM connections
`

func (q *Queries) GetConnections(ctx context.Context) ([]Connection, error) {
	rows, err := q.db.Query(ctx, GetConnections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connection
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ConID,
			&i.SiteID,
			&i.ConProvID,
			&i.ConTypeID,
			&i.ConCapID,
			&i.ConClassID,
			&i.Hint,
			&i.Notes,
			&i.InUse,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateConnection = `-- name: UpdateConnection :one
UPDATE connections
SET site_id = $2,
  con_prov_id = $3,
  con_type_id = $4,
  con_cap_id = $5,
  con_class_id = $6,
  hint = $7,
  notes = $8,
  in_use = $9
WHERE con_id = $1
RETURNING con_id, site_id, con_prov_id, con_type_id, con_cap_id, con_class_id, hint, notes, in_use, updated_on, created_on
`

type UpdateConnectionParams struct {
	ConID      int64          `json:"con_id"`
	SiteID     int64          `json:"site_id"`
	ConProvID  int64          `json:"con_prov_id"`
	ConTypeID  int64          `json:"con_type_id"`
	ConCapID   int64          `json:"con_cap_id"`
	ConClassID int64          `json:"con_class_id"`
	Hint       sql.NullString `json:"hint"`
	Notes      sql.NullString `json:"notes"`
	InUse      bool           `json:"in_use"`
}

func (q *Queries) UpdateConnection(ctx context.Context, arg UpdateConnectionParams) (Connection, error) {
	row := q.db.QueryRow(ctx, UpdateConnection,
		arg.ConID,
		arg.SiteID,
		arg.ConProvID,
		arg.ConTypeID,
		arg.ConCapID,
		arg.ConClassID,
		arg.Hint,
		arg.Notes,
		arg.InUse,
	)
	var i Connection
	err := row.Scan(
		&i.ConID,
		&i.SiteID,
		&i.ConProvID,
		&i.ConTypeID,
		&i.ConCapID,
		&i.ConClassID,
		&i.Hint,
		&i.Notes,
		&i.InUse,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
