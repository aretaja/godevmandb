// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package godevmandb

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgtype"
)

type SnmpAuthProto string

const (
	SnmpAuthProtoNoAuth SnmpAuthProto = "NoAuth"
	SnmpAuthProtoMD5    SnmpAuthProto = "MD5"
	SnmpAuthProtoSHA    SnmpAuthProto = "SHA"
)

func (e *SnmpAuthProto) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SnmpAuthProto(s)
	case string:
		*e = SnmpAuthProto(s)
	default:
		return fmt.Errorf("unsupported scan type for SnmpAuthProto: %T", src)
	}
	return nil
}

type NullSnmpAuthProto struct {
	SnmpAuthProto SnmpAuthProto
	Valid         bool // Valid is true if SnmpAuthProto is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSnmpAuthProto) Scan(value interface{}) error {
	if value == nil {
		ns.SnmpAuthProto, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SnmpAuthProto.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSnmpAuthProto) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SnmpAuthProto), nil
}

func AllSnmpAuthProtoValues() []SnmpAuthProto {
	return []SnmpAuthProto{
		SnmpAuthProtoNoAuth,
		SnmpAuthProtoMD5,
		SnmpAuthProtoSHA,
	}
}

type SnmpPrivProto string

const (
	SnmpPrivProtoNoPriv  SnmpPrivProto = "NoPriv"
	SnmpPrivProtoDES     SnmpPrivProto = "DES"
	SnmpPrivProtoAES     SnmpPrivProto = "AES"
	SnmpPrivProtoAES192  SnmpPrivProto = "AES192"
	SnmpPrivProtoAES192C SnmpPrivProto = "AES192C"
	SnmpPrivProtoAES256  SnmpPrivProto = "AES256"
	SnmpPrivProtoAES256C SnmpPrivProto = "AES256C"
)

func (e *SnmpPrivProto) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SnmpPrivProto(s)
	case string:
		*e = SnmpPrivProto(s)
	default:
		return fmt.Errorf("unsupported scan type for SnmpPrivProto: %T", src)
	}
	return nil
}

type NullSnmpPrivProto struct {
	SnmpPrivProto SnmpPrivProto
	Valid         bool // Valid is true if SnmpPrivProto is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSnmpPrivProto) Scan(value interface{}) error {
	if value == nil {
		ns.SnmpPrivProto, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SnmpPrivProto.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSnmpPrivProto) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SnmpPrivProto), nil
}

func AllSnmpPrivProtoValues() []SnmpPrivProto {
	return []SnmpPrivProto{
		SnmpPrivProtoNoPriv,
		SnmpPrivProtoDES,
		SnmpPrivProtoAES,
		SnmpPrivProtoAES192,
		SnmpPrivProtoAES192C,
		SnmpPrivProtoAES256,
		SnmpPrivProtoAES256C,
	}
}

type SnmpSecLevel string

const (
	SnmpSecLevelNoAuthNoPriv SnmpSecLevel = "noAuthNoPriv"
	SnmpSecLevelAuthNoPriv   SnmpSecLevel = "authNoPriv"
	SnmpSecLevelAuthPriv     SnmpSecLevel = "authPriv"
)

func (e *SnmpSecLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SnmpSecLevel(s)
	case string:
		*e = SnmpSecLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for SnmpSecLevel: %T", src)
	}
	return nil
}

type NullSnmpSecLevel struct {
	SnmpSecLevel SnmpSecLevel
	Valid        bool // Valid is true if SnmpSecLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSnmpSecLevel) Scan(value interface{}) error {
	if value == nil {
		ns.SnmpSecLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SnmpSecLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSnmpSecLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SnmpSecLevel), nil
}

func AllSnmpSecLevelValues() []SnmpSecLevel {
	return []SnmpSecLevel{
		SnmpSecLevelNoAuthNoPriv,
		SnmpSecLevelAuthNoPriv,
		SnmpSecLevelAuthPriv,
	}
}

type ArchivedInterface struct {
	IfaID              int64          `json:"ifa_id"`
	Ifindex            *int64         `json:"ifindex"`
	OtnIfID            *int64         `json:"otn_if_id"`
	CiscoOptPowerIndex *string        `json:"cisco_opt_power_index"`
	Hostname           string         `json:"hostname"`
	HostIp4            pgtype.Inet    `json:"host_ip4"`
	HostIp6            pgtype.Inet    `json:"host_ip6"`
	Manufacturer       string         `json:"manufacturer"`
	Model              string         `json:"model"`
	Descr              string         `json:"descr"`
	Alias              *string        `json:"alias"`
	TypeEnum           *int16         `json:"type_enum"`
	Mac                pgtype.Macaddr `json:"mac"`
	UpdatedOn          time.Time      `json:"updated_on"`
	CreatedOn          time.Time      `json:"created_on"`
}

type ArchivedSubinterface struct {
	SifaID      int64          `json:"sifa_id"`
	Ifindex     *int64         `json:"ifindex"`
	Descr       string         `json:"descr"`
	ParentDescr *string        `json:"parent_descr"`
	Alias       *string        `json:"alias"`
	Type        *string        `json:"type"`
	Mac         pgtype.Macaddr `json:"mac"`
	Hostname    string         `json:"hostname"`
	HostIp4     pgtype.Inet    `json:"host_ip4"`
	HostIp6     pgtype.Inet    `json:"host_ip6"`
	Notes       *string        `json:"notes"`
	UpdatedOn   time.Time      `json:"updated_on"`
	CreatedOn   time.Time      `json:"created_on"`
}

type ConCapacity struct {
	ConCapID  int64     `json:"con_cap_id"`
	Descr     string    `json:"descr"`
	Notes     *string   `json:"notes"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type ConClass struct {
	ConClassID int64     `json:"con_class_id"`
	Descr      string    `json:"descr"`
	Notes      *string   `json:"notes"`
	UpdatedOn  time.Time `json:"updated_on"`
	CreatedOn  time.Time `json:"created_on"`
}

type ConProvider struct {
	ConProvID int64     `json:"con_prov_id"`
	Descr     string    `json:"descr"`
	Notes     *string   `json:"notes"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type ConType struct {
	ConTypeID int64     `json:"con_type_id"`
	Descr     string    `json:"descr"`
	Notes     *string   `json:"notes"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Connection struct {
	ConID      int64     `json:"con_id"`
	SiteID     int64     `json:"site_id"`
	ConProvID  int64     `json:"con_prov_id"`
	ConTypeID  int64     `json:"con_type_id"`
	ConCapID   int64     `json:"con_cap_id"`
	ConClassID int64     `json:"con_class_id"`
	Hint       *string   `json:"hint"`
	Notes      *string   `json:"notes"`
	InUse      bool      `json:"in_use"`
	UpdatedOn  time.Time `json:"updated_on"`
	CreatedOn  time.Time `json:"created_on"`
}

type Country struct {
	CountryID int64 `json:"country_id"`
	// ISO 3166-1 Alpha-2 code
	Code      string    `json:"code"`
	Descr     string    `json:"descr"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Credential struct {
	CredID    int64     `json:"cred_id"`
	Label     string    `json:"label"`
	Username  *string   `json:"username"`
	EncSecret string    `json:"enc_secret"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type CustomEntity struct {
	CentID       int64     `json:"cent_id"`
	Manufacturer string    `json:"manufacturer"`
	SerialNr     string    `json:"serial_nr"`
	Part         *string   `json:"part"`
	Descr        *string   `json:"descr"`
	UpdatedOn    time.Time `json:"updated_on"`
	CreatedOn    time.Time `json:"created_on"`
}

type Device struct {
	DevID            int64       `json:"dev_id"`
	SiteID           *int64      `json:"site_id"`
	DomID            int64       `json:"dom_id"`
	SnmpMainID       *int64      `json:"snmp_main_id"`
	SnmpRoID         *int64      `json:"snmp_ro_id"`
	Parent           *int64      `json:"parent"`
	SysID            string      `json:"sys_id"`
	Ip4Addr          pgtype.Inet `json:"ip4_addr"`
	Ip6Addr          pgtype.Inet `json:"ip6_addr"`
	HostName         string      `json:"host_name"`
	SysName          *string     `json:"sys_name"`
	SysLocation      *string     `json:"sys_location"`
	SysContact       *string     `json:"sys_contact"`
	SwVersion        *string     `json:"sw_version"`
	ExtModel         *string     `json:"ext_model"`
	Installed        bool        `json:"installed"`
	Monitor          bool        `json:"monitor"`
	Graph            bool        `json:"graph"`
	Backup           bool        `json:"backup"`
	Source           string      `json:"source"`
	TypeChanged      bool        `json:"type_changed"`
	BackupFailed     bool        `json:"backup_failed"`
	ValidationFailed bool        `json:"validation_failed"`
	Unresponsive     bool        `json:"unresponsive"`
	Notes            *string     `json:"notes"`
	UpdatedOn        time.Time   `json:"updated_on"`
	CreatedOn        time.Time   `json:"created_on"`
}

type DeviceClass struct {
	ClassID   int64     `json:"class_id"`
	Descr     string    `json:"descr"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type DeviceCredential struct {
	CredID    int64     `json:"cred_id"`
	DevID     int64     `json:"dev_id"`
	Username  string    `json:"username"`
	EncSecret string    `json:"enc_secret"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type DeviceDomain struct {
	DomID     int64     `json:"dom_id"`
	Descr     string    `json:"descr"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type DeviceExtension struct {
	ExtID     int64     `json:"ext_id"`
	DevID     int64     `json:"dev_id"`
	Field     string    `json:"field"`
	Content   *string   `json:"content"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type DeviceLicense struct {
	LicID     int64     `json:"lic_id"`
	DevID     int64     `json:"dev_id"`
	Product   *string   `json:"product"`
	Descr     *string   `json:"descr"`
	Installed *int32    `json:"installed"`
	Unlocked  *int32    `json:"unlocked"`
	TotInst   *int32    `json:"tot_inst"`
	Used      *int32    `json:"used"`
	Condition *string   `json:"condition"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type DeviceState struct {
	DevID     int64      `json:"dev_id"`
	UpTime    *time.Time `json:"up_time"`
	DownTime  *time.Time `json:"down_time"`
	Method    string     `json:"method"`
	UpdatedOn time.Time  `json:"updated_on"`
	CreatedOn time.Time  `json:"created_on"`
}

type DeviceType struct {
	// snmp sysObjectId or some unique identifier if snmp is not supported
	SysID        string `json:"sys_id"`
	ClassID      int64  `json:"class_id"`
	Manufacturer string `json:"manufacturer"`
	Model        string `json:"model"`
	Hc           bool   `json:"hc"`
	// highest supported snmp version
	SnmpVer   int16     `json:"snmp_ver"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Entity struct {
	EntID        int64     `json:"ent_id"`
	ParentEntID  *int64    `json:"parent_ent_id"`
	SnmpEntID    *int64    `json:"snmp_ent_id"`
	DevID        int64     `json:"dev_id"`
	Slot         *string   `json:"slot"`
	Descr        *string   `json:"descr"`
	Model        *string   `json:"model"`
	HwProduct    *string   `json:"hw_product"`
	HwRevision   *string   `json:"hw_revision"`
	SerialNr     *string   `json:"serial_nr"`
	SwProduct    *string   `json:"sw_product"`
	SwRevision   *string   `json:"sw_revision"`
	Manufacturer *string   `json:"manufacturer"`
	Physical     bool      `json:"physical"`
	UpdatedOn    time.Time `json:"updated_on"`
	CreatedOn    time.Time `json:"created_on"`
}

type EntityPhyIndex struct {
	EiID      int64     `json:"ei_id"`
	EntID     int64     `json:"ent_id"`
	PhyIndex  int64     `json:"phy_index"`
	Descr     string    `json:"descr"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type IntBwStat struct {
	BwID      int64     `json:"bw_id"`
	IfID      int64     `json:"if_id"`
	To50in    *int16    `json:"to50in"`
	To75in    *int16    `json:"to75in"`
	To90in    *int16    `json:"to90in"`
	To100in   *int16    `json:"to100in"`
	To50out   *int16    `json:"to50out"`
	To75out   *int16    `json:"to75out"`
	To90out   *int16    `json:"to90out"`
	To100out  *int16    `json:"to100out"`
	IfGroup   string    `json:"if_group"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Interface struct {
	IfID       int64          `json:"if_id"`
	ConID      *int64         `json:"con_id"`
	Parent     *int64         `json:"parent"`
	OtnIfID    *int64         `json:"otn_if_id"`
	DevID      int64          `json:"dev_id"`
	EntID      *int64         `json:"ent_id"`
	Ifindex    *int64         `json:"ifindex"`
	Descr      string         `json:"descr"`
	Alias      *string        `json:"alias"`
	Oper       *int16         `json:"oper"`
	Adm        *int16         `json:"adm"`
	Speed      *int64         `json:"speed"`
	Minspeed   *int64         `json:"minspeed"`
	TypeEnum   *int16         `json:"type_enum"`
	Mac        pgtype.Macaddr `json:"mac"`
	Monstatus  int16          `json:"monstatus"`
	Monerrors  int16          `json:"monerrors"`
	Monload    int16          `json:"monload"`
	UpdatedOn  time.Time      `json:"updated_on"`
	CreatedOn  time.Time      `json:"created_on"`
	Montraffic int16          `json:"montraffic"`
}

type InterfaceRelation struct {
	IrID      int64     `json:"ir_id"`
	IfID      int64     `json:"if_id"`
	IfIDUp    *int64    `json:"if_id_up"`
	IfIDDown  *int64    `json:"if_id_down"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Interfaces2vlan struct {
	VID       int64     `json:"v_id"`
	IfID      int64     `json:"if_id"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type IpInterface struct {
	IpID      int64       `json:"ip_id"`
	DevID     int64       `json:"dev_id"`
	Ifindex   *int64      `json:"ifindex"`
	IpAddr    pgtype.Inet `json:"ip_addr"`
	Descr     *string     `json:"descr"`
	Alias     *string     `json:"alias"`
	UpdatedOn time.Time   `json:"updated_on"`
	CreatedOn time.Time   `json:"created_on"`
}

type OspfNbr struct {
	NbrID     int64       `json:"nbr_id"`
	DevID     int64       `json:"dev_id"`
	NbrIp     pgtype.Inet `json:"nbr_ip"`
	Condition *string     `json:"condition"`
	UpdatedOn time.Time   `json:"updated_on"`
	CreatedOn time.Time   `json:"created_on"`
}

type RlNbr struct {
	NbrID      int64     `json:"nbr_id"`
	DevID      int64     `json:"dev_id"`
	NbrEntID   *int64    `json:"nbr_ent_id"`
	NbrSysname string    `json:"nbr_sysname"`
	UpdatedOn  time.Time `json:"updated_on"`
	CreatedOn  time.Time `json:"created_on"`
}

type Site struct {
	SiteID    int64     `json:"site_id"`
	CountryID int64     `json:"country_id"`
	Uident    *string   `json:"uident"`
	Descr     string    `json:"descr"`
	Latitude  *float32  `json:"latitude"`
	Longitude *float32  `json:"longitude"`
	Area      *string   `json:"area"`
	Addr      *string   `json:"addr"`
	Notes     *string   `json:"notes"`
	ExtID     *int64    `json:"ext_id"`
	ExtName   *string   `json:"ext_name"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type SnmpCredential struct {
	SnmpCredID int64  `json:"snmp_cred_id"`
	Label      string `json:"label"`
	Variant    int32  `json:"variant"`
	// Community or SecName
	AuthName  string            `json:"auth_name"`
	AuthProto NullSnmpAuthProto `json:"auth_proto"`
	AuthPass  *string           `json:"auth_pass"`
	SecLevel  NullSnmpSecLevel  `json:"sec_level"`
	PrivProto NullSnmpPrivProto `json:"priv_proto"`
	PrivPass  *string           `json:"priv_pass"`
	UpdatedOn time.Time         `json:"updated_on"`
	CreatedOn time.Time         `json:"created_on"`
}

type Subinterface struct {
	SifID     int64          `json:"sif_id"`
	IfID      *int64         `json:"if_id"`
	Ifindex   *int64         `json:"ifindex"`
	Descr     string         `json:"descr"`
	Alias     *string        `json:"alias"`
	Oper      *int16         `json:"oper"`
	Adm       *int16         `json:"adm"`
	Speed     *int64         `json:"speed"`
	TypeEnum  *string        `json:"type_enum"`
	Mac       pgtype.Macaddr `json:"mac"`
	Notes     *string        `json:"notes"`
	UpdatedOn time.Time      `json:"updated_on"`
	CreatedOn time.Time      `json:"created_on"`
}

type User struct {
	Username  string    `json:"username"`
	Userlevel int16     `json:"userlevel"`
	Notes     *string   `json:"notes"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type UserAuthz struct {
	Username  string    `json:"username"`
	DomID     int64     `json:"dom_id"`
	Userlevel int16     `json:"userlevel"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type UserGraph struct {
	GraphID   int64     `json:"graph_id"`
	Username  string    `json:"username"`
	Uri       string    `json:"uri"`
	Descr     string    `json:"descr"`
	Shared    bool      `json:"shared"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Var struct {
	Descr     string    `json:"descr"`
	Content   *string   `json:"content"`
	Notes     *string   `json:"notes"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Vlan struct {
	VID       int64     `json:"v_id"`
	DevID     int64     `json:"dev_id"`
	Vlan      int64     `json:"vlan"`
	Descr     *string   `json:"descr"`
	UpdatedOn time.Time `json:"updated_on"`
	CreatedOn time.Time `json:"created_on"`
}

type Xconnect struct {
	XcID        int64       `json:"xc_id"`
	DevID       int64       `json:"dev_id"`
	PeerDevID   *int64      `json:"peer_dev_id"`
	IfID        *int64      `json:"if_id"`
	VcIdx       int64       `json:"vc_idx"`
	VcID        int64       `json:"vc_id"`
	PeerIp      pgtype.Inet `json:"peer_ip"`
	PeerIfalias *string     `json:"peer_ifalias"`
	Xname       *string     `json:"xname"`
	Descr       *string     `json:"descr"`
	OpStat      *string     `json:"op_stat"`
	OpStatIn    *string     `json:"op_stat_in"`
	OpStatOut   *string     `json:"op_stat_out"`
	UpdatedOn   time.Time   `json:"updated_on"`
	CreatedOn   time.Time   `json:"created_on"`
}
