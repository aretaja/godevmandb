// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: ospf_nbrs.sql

package godevmandb

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const CountOspfNbrs = `-- name: CountOspfNbrs :one
SELECT COUNT(*)
FROM ospf_nbrs
`

func (q *Queries) CountOspfNbrs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountOspfNbrs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateOspfNbr = `-- name: CreateOspfNbr :one
INSERT INTO ospf_nbrs (
        dev_id,
        nbr_ip,
        condition
    )
VALUES ($1, $2, $3)
RETURNING nbr_id, dev_id, nbr_ip, condition, updated_on, created_on
`

type CreateOspfNbrParams struct {
	DevID     int64          `json:"dev_id"`
	NbrIp     pgtype.Inet    `json:"nbr_ip"`
	Condition sql.NullString `json:"condition"`
}

func (q *Queries) CreateOspfNbr(ctx context.Context, arg CreateOspfNbrParams) (OspfNbr, error) {
	row := q.db.QueryRow(ctx, CreateOspfNbr, arg.DevID, arg.NbrIp, arg.Condition)
	var i OspfNbr
	err := row.Scan(
		&i.NbrID,
		&i.DevID,
		&i.NbrIp,
		&i.Condition,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteOspfNbr = `-- name: DeleteOspfNbr :exec
DELETE FROM ospf_nbrs
WHERE nbr_id = $1
`

func (q *Queries) DeleteOspfNbr(ctx context.Context, nbrID int64) error {
	_, err := q.db.Exec(ctx, DeleteOspfNbr, nbrID)
	return err
}

const GetOspfNbr = `-- name: GetOspfNbr :one
SELECT nbr_id, dev_id, nbr_ip, condition, updated_on, created_on
FROM ospf_nbrs
WHERE nbr_id = $1
`

func (q *Queries) GetOspfNbr(ctx context.Context, nbrID int64) (OspfNbr, error) {
	row := q.db.QueryRow(ctx, GetOspfNbr, nbrID)
	var i OspfNbr
	err := row.Scan(
		&i.NbrID,
		&i.DevID,
		&i.NbrIp,
		&i.Condition,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetOspfNbrDevice = `-- name: GetOspfNbrDevice :one
SELECT t2.dev_id, t2.site_id, t2.dom_id, t2.snmp_main_id, t2.snmp_ro_id, t2.parent, t2.sys_id, t2.ip4_addr, t2.ip6_addr, t2.host_name, t2.sys_name, t2.sys_location, t2.sys_contact, t2.sw_version, t2.ext_model, t2.installed, t2.monitor, t2.graph, t2.backup, t2.source, t2.type_changed, t2.backup_failed, t2.validation_failed, t2.unresponsive, t2.notes, t2.updated_on, t2.created_on
FROM ospf_nbrs t1
    INNER JOIN devices t2 ON t2.dev_id = t1.dev_id
WHERE t1.nbr_id = $1
`

// Foreign keys
func (q *Queries) GetOspfNbrDevice(ctx context.Context, nbrID int64) (Device, error) {
	row := q.db.QueryRow(ctx, GetOspfNbrDevice, nbrID)
	var i Device
	err := row.Scan(
		&i.DevID,
		&i.SiteID,
		&i.DomID,
		&i.SnmpMainID,
		&i.SnmpRoID,
		&i.Parent,
		&i.SysID,
		&i.Ip4Addr,
		&i.Ip6Addr,
		&i.HostName,
		&i.SysName,
		&i.SysLocation,
		&i.SysContact,
		&i.SwVersion,
		&i.ExtModel,
		&i.Installed,
		&i.Monitor,
		&i.Graph,
		&i.Backup,
		&i.Source,
		&i.TypeChanged,
		&i.BackupFailed,
		&i.ValidationFailed,
		&i.Unresponsive,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetOspfNbrs = `-- name: GetOspfNbrs :many
SELECT nbr_id, dev_id, nbr_ip, condition, updated_on, created_on
FROM ospf_nbrs
ORDER BY descr
LIMIT $1
OFFSET $2
`

type GetOspfNbrsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOspfNbrs(ctx context.Context, arg GetOspfNbrsParams) ([]OspfNbr, error) {
	rows, err := q.db.Query(ctx, GetOspfNbrs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OspfNbr
	for rows.Next() {
		var i OspfNbr
		if err := rows.Scan(
			&i.NbrID,
			&i.DevID,
			&i.NbrIp,
			&i.Condition,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateOspfNbr = `-- name: UpdateOspfNbr :one
UPDATE ospf_nbrs
SET dev_id = $2,
    nbr_ip = $3,
    condition = $4
WHERE nbr_id = $1
RETURNING nbr_id, dev_id, nbr_ip, condition, updated_on, created_on
`

type UpdateOspfNbrParams struct {
	NbrID     int64          `json:"nbr_id"`
	DevID     int64          `json:"dev_id"`
	NbrIp     pgtype.Inet    `json:"nbr_ip"`
	Condition sql.NullString `json:"condition"`
}

func (q *Queries) UpdateOspfNbr(ctx context.Context, arg UpdateOspfNbrParams) (OspfNbr, error) {
	row := q.db.QueryRow(ctx, UpdateOspfNbr,
		arg.NbrID,
		arg.DevID,
		arg.NbrIp,
		arg.Condition,
	)
	var i OspfNbr
	err := row.Scan(
		&i.NbrID,
		&i.DevID,
		&i.NbrIp,
		&i.Condition,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
