// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: subinterfaces.sql

package godevmandb

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const CountSubinterfaces = `-- name: CountSubinterfaces :one
SELECT COUNT(*)
FROM subinterfaces
`

func (q *Queries) CountSubinterfaces(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountSubinterfaces)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateSubinterface = `-- name: CreateSubinterface :one
INSERT INTO subinterfaces (
    if_id,
    ifindex,
    descr,
    alias,
    oper,
    adm,
    speed,
    type_enum,
    mac,
    notes
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
  )
RETURNING sif_id, if_id, ifindex, descr, alias, oper, adm, speed, type_enum, mac, notes, updated_on, created_on
`

type CreateSubinterfaceParams struct {
	IfID     sql.NullInt64  `json:"if_id"`
	Ifindex  sql.NullInt64  `json:"ifindex"`
	Descr    string         `json:"descr"`
	Alias    sql.NullString `json:"alias"`
	Oper     sql.NullInt16  `json:"oper"`
	Adm      sql.NullInt16  `json:"adm"`
	Speed    sql.NullInt64  `json:"speed"`
	TypeEnum sql.NullString `json:"type_enum"`
	Mac      pgtype.Macaddr `json:"mac"`
	Notes    sql.NullString `json:"notes"`
}

func (q *Queries) CreateSubinterface(ctx context.Context, arg CreateSubinterfaceParams) (Subinterface, error) {
	row := q.db.QueryRow(ctx, CreateSubinterface,
		arg.IfID,
		arg.Ifindex,
		arg.Descr,
		arg.Alias,
		arg.Oper,
		arg.Adm,
		arg.Speed,
		arg.TypeEnum,
		arg.Mac,
		arg.Notes,
	)
	var i Subinterface
	err := row.Scan(
		&i.SifID,
		&i.IfID,
		&i.Ifindex,
		&i.Descr,
		&i.Alias,
		&i.Oper,
		&i.Adm,
		&i.Speed,
		&i.TypeEnum,
		&i.Mac,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteSubinterface = `-- name: DeleteSubinterface :exec
DELETE FROM subinterfaces
WHERE sif_id = $1
`

func (q *Queries) DeleteSubinterface(ctx context.Context, sifID int64) error {
	_, err := q.db.Exec(ctx, DeleteSubinterface, sifID)
	return err
}

const GetSubinterface = `-- name: GetSubinterface :one
SELECT sif_id, if_id, ifindex, descr, alias, oper, adm, speed, type_enum, mac, notes, updated_on, created_on
FROM subinterfaces
WHERE sif_id = $1
`

func (q *Queries) GetSubinterface(ctx context.Context, sifID int64) (Subinterface, error) {
	row := q.db.QueryRow(ctx, GetSubinterface, sifID)
	var i Subinterface
	err := row.Scan(
		&i.SifID,
		&i.IfID,
		&i.Ifindex,
		&i.Descr,
		&i.Alias,
		&i.Oper,
		&i.Adm,
		&i.Speed,
		&i.TypeEnum,
		&i.Mac,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetSubinterfaceInterface = `-- name: GetSubinterfaceInterface :one
SELECT t2.if_id, t2.con_id, t2.parent, t2.otn_if_id, t2.dev_id, t2.ent_id, t2.ifindex, t2.descr, t2.alias, t2.oper, t2.adm, t2.speed, t2.minspeed, t2.type_enum, t2.mac, t2.monstatus, t2.monerrors, t2.monload, t2.updated_on, t2.created_on, t2.montraffic
FROM subinterfaces t1
  INNER JOIN interfaces t2 ON t2.if_id = t1.if_id
WHERE t1.sif_id = $1
`

// Foreign keys
func (q *Queries) GetSubinterfaceInterface(ctx context.Context, sifID int64) (Interface, error) {
	row := q.db.QueryRow(ctx, GetSubinterfaceInterface, sifID)
	var i Interface
	err := row.Scan(
		&i.IfID,
		&i.ConID,
		&i.Parent,
		&i.OtnIfID,
		&i.DevID,
		&i.EntID,
		&i.Ifindex,
		&i.Descr,
		&i.Alias,
		&i.Oper,
		&i.Adm,
		&i.Speed,
		&i.Minspeed,
		&i.TypeEnum,
		&i.Mac,
		&i.Monstatus,
		&i.Monerrors,
		&i.Monload,
		&i.UpdatedOn,
		&i.CreatedOn,
		&i.Montraffic,
	)
	return i, err
}

const GetSubinterfaces = `-- name: GetSubinterfaces :many
SELECT sif_id, if_id, ifindex, descr, alias, oper, adm, speed, type_enum, mac, notes, updated_on, created_on
FROM subinterfaces
ORDER BY descr
LIMIT $1
OFFSET $2
`

type GetSubinterfacesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetSubinterfaces(ctx context.Context, arg GetSubinterfacesParams) ([]Subinterface, error) {
	rows, err := q.db.Query(ctx, GetSubinterfaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subinterface
	for rows.Next() {
		var i Subinterface
		if err := rows.Scan(
			&i.SifID,
			&i.IfID,
			&i.Ifindex,
			&i.Descr,
			&i.Alias,
			&i.Oper,
			&i.Adm,
			&i.Speed,
			&i.TypeEnum,
			&i.Mac,
			&i.Notes,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSubinterface = `-- name: UpdateSubinterface :one
UPDATE subinterfaces
SET if_id = $2,
  ifindex = $3,
  descr = $4,
  alias = $5,
  oper = $6,
  adm = $7,
  speed = $8,
  type_enum = $9,
  mac = $10,
  notes = $11
WHERE sif_id = $1
RETURNING sif_id, if_id, ifindex, descr, alias, oper, adm, speed, type_enum, mac, notes, updated_on, created_on
`

type UpdateSubinterfaceParams struct {
	SifID    int64          `json:"sif_id"`
	IfID     sql.NullInt64  `json:"if_id"`
	Ifindex  sql.NullInt64  `json:"ifindex"`
	Descr    string         `json:"descr"`
	Alias    sql.NullString `json:"alias"`
	Oper     sql.NullInt16  `json:"oper"`
	Adm      sql.NullInt16  `json:"adm"`
	Speed    sql.NullInt64  `json:"speed"`
	TypeEnum sql.NullString `json:"type_enum"`
	Mac      pgtype.Macaddr `json:"mac"`
	Notes    sql.NullString `json:"notes"`
}

func (q *Queries) UpdateSubinterface(ctx context.Context, arg UpdateSubinterfaceParams) (Subinterface, error) {
	row := q.db.QueryRow(ctx, UpdateSubinterface,
		arg.SifID,
		arg.IfID,
		arg.Ifindex,
		arg.Descr,
		arg.Alias,
		arg.Oper,
		arg.Adm,
		arg.Speed,
		arg.TypeEnum,
		arg.Mac,
		arg.Notes,
	)
	var i Subinterface
	err := row.Scan(
		&i.SifID,
		&i.IfID,
		&i.Ifindex,
		&i.Descr,
		&i.Alias,
		&i.Oper,
		&i.Adm,
		&i.Speed,
		&i.TypeEnum,
		&i.Mac,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
