// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: int_bw_stats.sql

package godevmandb

import (
	"context"
	"time"
)

const CountIntBwStats = `-- name: CountIntBwStats :one
SELECT COUNT(*)
FROM int_bw_stats
`

func (q *Queries) CountIntBwStats(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountIntBwStats)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateIntBwStat = `-- name: CreateIntBwStat :one
INSERT INTO int_bw_stats (
    if_id,
    to50in,
    to75in,
    to90in,
    to100in,
    to50out,
    to75out,
    to90out,
    to100out,
    if_group
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
  )
RETURNING bw_id, if_id, to50in, to75in, to90in, to100in, to50out, to75out, to90out, to100out, if_group, updated_on, created_on
`

type CreateIntBwStatParams struct {
	IfID     int64  `json:"if_id"`
	To50in   *int16 `json:"to50in"`
	To75in   *int16 `json:"to75in"`
	To90in   *int16 `json:"to90in"`
	To100in  *int16 `json:"to100in"`
	To50out  *int16 `json:"to50out"`
	To75out  *int16 `json:"to75out"`
	To90out  *int16 `json:"to90out"`
	To100out *int16 `json:"to100out"`
	IfGroup  string `json:"if_group"`
}

func (q *Queries) CreateIntBwStat(ctx context.Context, arg CreateIntBwStatParams) (IntBwStat, error) {
	row := q.db.QueryRow(ctx, CreateIntBwStat,
		arg.IfID,
		arg.To50in,
		arg.To75in,
		arg.To90in,
		arg.To100in,
		arg.To50out,
		arg.To75out,
		arg.To90out,
		arg.To100out,
		arg.IfGroup,
	)
	var i IntBwStat
	err := row.Scan(
		&i.BwID,
		&i.IfID,
		&i.To50in,
		&i.To75in,
		&i.To90in,
		&i.To100in,
		&i.To50out,
		&i.To75out,
		&i.To90out,
		&i.To100out,
		&i.IfGroup,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteIntBwStat = `-- name: DeleteIntBwStat :exec
DELETE FROM int_bw_stats
WHERE bw_id = $1
`

func (q *Queries) DeleteIntBwStat(ctx context.Context, bwID int64) error {
	_, err := q.db.Exec(ctx, DeleteIntBwStat, bwID)
	return err
}

const GetIntBwStat = `-- name: GetIntBwStat :one
SELECT bw_id, if_id, to50in, to75in, to90in, to100in, to50out, to75out, to90out, to100out, if_group, updated_on, created_on
FROM int_bw_stats
WHERE bw_id = $1
`

func (q *Queries) GetIntBwStat(ctx context.Context, bwID int64) (IntBwStat, error) {
	row := q.db.QueryRow(ctx, GetIntBwStat, bwID)
	var i IntBwStat
	err := row.Scan(
		&i.BwID,
		&i.IfID,
		&i.To50in,
		&i.To75in,
		&i.To90in,
		&i.To100in,
		&i.To50out,
		&i.To75out,
		&i.To90out,
		&i.To100out,
		&i.IfGroup,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetIntBwStatInterface = `-- name: GetIntBwStatInterface :one
SELECT t2.if_id, t2.con_id, t2.parent, t2.otn_if_id, t2.dev_id, t2.ent_id, t2.ifindex, t2.descr, t2.alias, t2.oper, t2.adm, t2.speed, t2.minspeed, t2.type_enum, t2.mac, t2.monstatus, t2.monerrors, t2.monload, t2.updated_on, t2.created_on, t2.montraffic
FROM int_bw_stats t1
  INNER JOIN interfaces t2 ON t2.if_id = t1.if_id
WHERE t1.bw_id = $1
`

// Foreign keys
func (q *Queries) GetIntBwStatInterface(ctx context.Context, bwID int64) (Interface, error) {
	row := q.db.QueryRow(ctx, GetIntBwStatInterface, bwID)
	var i Interface
	err := row.Scan(
		&i.IfID,
		&i.ConID,
		&i.Parent,
		&i.OtnIfID,
		&i.DevID,
		&i.EntID,
		&i.Ifindex,
		&i.Descr,
		&i.Alias,
		&i.Oper,
		&i.Adm,
		&i.Speed,
		&i.Minspeed,
		&i.TypeEnum,
		&i.Mac,
		&i.Monstatus,
		&i.Monerrors,
		&i.Monload,
		&i.UpdatedOn,
		&i.CreatedOn,
		&i.Montraffic,
	)
	return i, err
}

const GetIntBwStats = `-- name: GetIntBwStats :many
SELECT bw_id, if_id, to50in, to75in, to90in, to100in, to50out, to75out, to90out, to100out, if_group, updated_on, created_on
FROM int_bw_stats
WHERE (
    $1::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on >= $1
  )
  AND (
    $2::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on <= $2
  )
  AND (
    $3::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on >= $3
  )
  AND (
    $4::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on <= $4
  )
  AND (
    $5::text IS NULL
    OR ($5::text = 'isnull' AND to50in IS NULL)
    OR to50in <= CAST($5 AS integer)
  )
  AND (
    $6::text IS NULL
    OR ($6::text = 'isnull' AND to50in IS NULL)
    OR to50in >= CAST($6 AS integer)
  )
  AND (
    $7::text IS NULL
    OR ($7::text = 'isnull' AND to75in IS NULL)
    OR to75in <= CAST($7 AS integer)
  )
  AND (
    $8::text IS NULL
    OR ($8::text = 'isnull' AND to75in IS NULL)
    OR to75in >= CAST($8 AS integer)
  )
  AND (
    $9::text IS NULL
    OR ($9::text = 'isnull' AND to90in IS NULL)
    OR to90in <= CAST($9 AS integer)
  )
  AND (
    $10::text IS NULL
    OR ($10::text = 'isnull' AND to90in IS NULL)
    OR to90in >= CAST($10 AS integer)
  )
  AND (
    $11::text IS NULL
    OR ($11::text = 'isnull' AND to100in IS NULL)
    OR to100in <= CAST($11 AS integer)
  )
  AND (
    $12::text IS NULL
    OR ($12::text = 'isnull' AND to100in IS NULL)
    OR to100in >= CAST($12 AS integer)
  )
  AND (
    $13::text IS NULL
    OR ($13::text = 'isnull' AND to50out IS NULL)
    OR to50out <= CAST($13 AS integer)
  )
  AND (
    $14::text IS NULL
    OR ($14::text = 'isnull' AND to50out IS NULL)
    OR to50out >= CAST($14 AS integer)
  )
  AND (
    $15::text IS NULL
    OR ($15::text = 'isnull' AND to75out IS NULL)
    OR to75out <= CAST($15 AS integer)
  )
  AND (
    $16::text IS NULL
    OR ($16::text = 'isnull' AND to75out IS NULL)
    OR to75out >= CAST($16 AS integer)
  )
  AND (
    $17::text IS NULL
    OR ($17::text = 'isnull' AND to90out IS NULL)
    OR to90out <= CAST($17 AS integer)
  )
  AND (
    $18::text IS NULL
    OR ($18::text = 'isnull' AND to90out IS NULL)
    OR to90out >= CAST($18 AS integer)
  )
  AND (
    $19::text IS NULL
    OR ($19::text = 'isnull' AND to100out IS NULL)
    OR to100out <= CAST($19 AS integer)
  )
  AND (
    $20::text IS NULL
    OR ($20::text = 'isnull' AND to100out IS NULL)
    OR to100out >= CAST($20 AS integer)
  )
  AND (
    $21::text = ''
    OR if_group ILIKE $21
  )
ORDER BY created_on
LIMIT NULLIF($23::int, 0) OFFSET NULLIF($22::int, 0)
`

type GetIntBwStatsParams struct {
	UpdatedGe  time.Time `json:"updated_ge"`
	UpdatedLe  time.Time `json:"updated_le"`
	CreatedGe  time.Time `json:"created_ge"`
	CreatedLe  time.Time `json:"created_le"`
	To50inLe   *string   `json:"to50in_le"`
	To50inGe   *string   `json:"to50in_ge"`
	To75inLe   *string   `json:"to75in_le"`
	To75inGe   *string   `json:"to75in_ge"`
	To90inLe   *string   `json:"to90in_le"`
	To90inGe   *string   `json:"to90in_ge"`
	To100inLe  *string   `json:"to100in_le"`
	To100inGe  *string   `json:"to100in_ge"`
	To50outLe  *string   `json:"to50out_le"`
	To50outGe  *string   `json:"to50out_ge"`
	To75outLe  *string   `json:"to75out_le"`
	To75outGe  *string   `json:"to75out_ge"`
	To90outLe  *string   `json:"to90out_le"`
	To90outGe  *string   `json:"to90out_ge"`
	To100outLe *string   `json:"to100out_le"`
	To100outGe *string   `json:"to100out_ge"`
	IfGroupF   string    `json:"if_group_f"`
	OffsetQ    int32     `json:"offset_q"`
	LimitQ     int32     `json:"limit_q"`
}

func (q *Queries) GetIntBwStats(ctx context.Context, arg GetIntBwStatsParams) ([]IntBwStat, error) {
	rows, err := q.db.Query(ctx, GetIntBwStats,
		arg.UpdatedGe,
		arg.UpdatedLe,
		arg.CreatedGe,
		arg.CreatedLe,
		arg.To50inLe,
		arg.To50inGe,
		arg.To75inLe,
		arg.To75inGe,
		arg.To90inLe,
		arg.To90inGe,
		arg.To100inLe,
		arg.To100inGe,
		arg.To50outLe,
		arg.To50outGe,
		arg.To75outLe,
		arg.To75outGe,
		arg.To90outLe,
		arg.To90outGe,
		arg.To100outLe,
		arg.To100outGe,
		arg.IfGroupF,
		arg.OffsetQ,
		arg.LimitQ,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IntBwStat
	for rows.Next() {
		var i IntBwStat
		if err := rows.Scan(
			&i.BwID,
			&i.IfID,
			&i.To50in,
			&i.To75in,
			&i.To90in,
			&i.To100in,
			&i.To50out,
			&i.To75out,
			&i.To90out,
			&i.To100out,
			&i.IfGroup,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateIntBwStat = `-- name: UpdateIntBwStat :one
UPDATE int_bw_stats
SET if_id = $2,
  to50in = $3,
  to75in = $4,
  to90in = $5,
  to100in = $6,
  to50out = $7,
  to75out = $8,
  to90out = $9,
  to100out = $10,
  if_group = $11
WHERE bw_id = $1
RETURNING bw_id, if_id, to50in, to75in, to90in, to100in, to50out, to75out, to90out, to100out, if_group, updated_on, created_on
`

type UpdateIntBwStatParams struct {
	BwID     int64  `json:"bw_id"`
	IfID     int64  `json:"if_id"`
	To50in   *int16 `json:"to50in"`
	To75in   *int16 `json:"to75in"`
	To90in   *int16 `json:"to90in"`
	To100in  *int16 `json:"to100in"`
	To50out  *int16 `json:"to50out"`
	To75out  *int16 `json:"to75out"`
	To90out  *int16 `json:"to90out"`
	To100out *int16 `json:"to100out"`
	IfGroup  string `json:"if_group"`
}

func (q *Queries) UpdateIntBwStat(ctx context.Context, arg UpdateIntBwStatParams) (IntBwStat, error) {
	row := q.db.QueryRow(ctx, UpdateIntBwStat,
		arg.BwID,
		arg.IfID,
		arg.To50in,
		arg.To75in,
		arg.To90in,
		arg.To100in,
		arg.To50out,
		arg.To75out,
		arg.To90out,
		arg.To100out,
		arg.IfGroup,
	)
	var i IntBwStat
	err := row.Scan(
		&i.BwID,
		&i.IfID,
		&i.To50in,
		&i.To75in,
		&i.To90in,
		&i.To100in,
		&i.To50out,
		&i.To75out,
		&i.To90out,
		&i.To100out,
		&i.IfGroup,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
