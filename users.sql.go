// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package godevmandb

import (
	"context"
	"database/sql"
)

const CountUsers = `-- name: CountUsers :one
SELECT COUNT(*)
FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (username, userlevel, notes)
VALUES ($1, $2, $3)
RETURNING username, userlevel, notes, updated_on, created_on
`

type CreateUserParams struct {
	Username  string         `json:"username"`
	Userlevel int16          `json:"userlevel"`
	Notes     sql.NullString `json:"notes"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, CreateUser, arg.Username, arg.Userlevel, arg.Notes)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Userlevel,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, DeleteUser, username)
	return err
}

const GetUser = `-- name: GetUser :one
SELECT username, userlevel, notes, updated_on, created_on
FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, GetUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Userlevel,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetUserUserAuthzs = `-- name: GetUserUserAuthzs :many
SELECT username, dom_id, userlevel, updated_on, created_on
FROM user_authzs
WHERE username = $1
ORDER BY username
`

// Relations
func (q *Queries) GetUserUserAuthzs(ctx context.Context, username string) ([]UserAuthz, error) {
	rows, err := q.db.Query(ctx, GetUserUserAuthzs, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAuthz
	for rows.Next() {
		var i UserAuthz
		if err := rows.Scan(
			&i.Username,
			&i.DomID,
			&i.Userlevel,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserUserGraps = `-- name: GetUserUserGraps :many
SELECT graph_id, username, uri, descr, shared, updated_on, created_on
FROM user_graphs
WHERE username = $1
ORDER BY username
`

// Relations
func (q *Queries) GetUserUserGraps(ctx context.Context, username string) ([]UserGraph, error) {
	rows, err := q.db.Query(ctx, GetUserUserGraps, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserGraph
	for rows.Next() {
		var i UserGraph
		if err := rows.Scan(
			&i.GraphID,
			&i.Username,
			&i.Uri,
			&i.Descr,
			&i.Shared,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUsers = `-- name: GetUsers :many
SELECT username, userlevel, notes, updated_on, created_on
FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, GetUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Userlevel,
			&i.Notes,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET userlevel = $2,
    notes = $3
WHERE username = $1
RETURNING username, userlevel, notes, updated_on, created_on
`

type UpdateUserParams struct {
	Username  string         `json:"username"`
	Userlevel int16          `json:"userlevel"`
	Notes     sql.NullString `json:"notes"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, UpdateUser, arg.Username, arg.Userlevel, arg.Notes)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Userlevel,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
