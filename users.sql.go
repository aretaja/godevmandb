// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package godevmandb

import (
	"context"
	"time"
)

const CountUsers = `-- name: CountUsers :one
SELECT COUNT(*)
FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (username, userlevel, notes)
VALUES ($1, $2, $3)
RETURNING username, userlevel, notes, updated_on, created_on
`

type CreateUserParams struct {
	Username  string  `json:"username"`
	Userlevel int16   `json:"userlevel"`
	Notes     *string `json:"notes"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, CreateUser, arg.Username, arg.Userlevel, arg.Notes)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Userlevel,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, DeleteUser, username)
	return err
}

const GetUser = `-- name: GetUser :one
SELECT username, userlevel, notes, updated_on, created_on
FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, GetUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Userlevel,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetUserUserAuthzs = `-- name: GetUserUserAuthzs :many
SELECT username, dom_id, userlevel, updated_on, created_on
FROM user_authzs
WHERE username = $1
ORDER BY username
`

// Relations
func (q *Queries) GetUserUserAuthzs(ctx context.Context, username string) ([]UserAuthz, error) {
	rows, err := q.db.Query(ctx, GetUserUserAuthzs, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAuthz
	for rows.Next() {
		var i UserAuthz
		if err := rows.Scan(
			&i.Username,
			&i.DomID,
			&i.Userlevel,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserUserGraphs = `-- name: GetUserUserGraphs :many
SELECT graph_id, username, uri, descr, shared, updated_on, created_on
FROM user_graphs
WHERE username = $1
ORDER BY username
`

// Relations
func (q *Queries) GetUserUserGraphs(ctx context.Context, username string) ([]UserGraph, error) {
	rows, err := q.db.Query(ctx, GetUserUserGraphs, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserGraph
	for rows.Next() {
		var i UserGraph
		if err := rows.Scan(
			&i.GraphID,
			&i.Username,
			&i.Uri,
			&i.Descr,
			&i.Shared,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUsers = `-- name: GetUsers :many
SELECT username, userlevel, notes, updated_on, created_on
FROM users
WHERE (
    $1::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on >= $1
  )
  AND (
    $2::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on <= $2
  )
  AND (
    $3::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on >= $3
  )
  AND (
    $4::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on <= $4
  )
  AND (
    $5::text = ''
    OR username = $5
  )
  AND (
    $6::text = ''
    OR userlevel <= CAST($6 AS integer)
  )
  AND (
    $7::text = ''
    OR userlevel <= CAST($7 AS integer)
  )
  AND (
    $8::text IS NULL
    OR ($8::text = 'isnull' AND notes IS NULL)
    OR ($8::text = 'isempty' AND notes = '')
    OR notes ILIKE $8
  )
ORDER BY created_on
LIMIT NULLIF($10::int, 0) OFFSET NULLIF($9::int, 0)
`

type GetUsersParams struct {
	UpdatedGe   time.Time `json:"updated_ge"`
	UpdatedLe   time.Time `json:"updated_le"`
	CreatedGe   time.Time `json:"created_ge"`
	CreatedLe   time.Time `json:"created_le"`
	UsernameF   string    `json:"username_f"`
	UserlevelLe string    `json:"userlevel_le"`
	UserlevelGe string    `json:"userlevel_ge"`
	NotesF      *string   `json:"notes_f"`
	OffsetQ     int32     `json:"offset_q"`
	LimitQ      int32     `json:"limit_q"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, GetUsers,
		arg.UpdatedGe,
		arg.UpdatedLe,
		arg.CreatedGe,
		arg.CreatedLe,
		arg.UsernameF,
		arg.UserlevelLe,
		arg.UserlevelGe,
		arg.NotesF,
		arg.OffsetQ,
		arg.LimitQ,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Userlevel,
			&i.Notes,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET userlevel = $2,
    notes = $3
WHERE username = $1
RETURNING username, userlevel, notes, updated_on, created_on
`

type UpdateUserParams struct {
	Username  string  `json:"username"`
	Userlevel int16   `json:"userlevel"`
	Notes     *string `json:"notes"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, UpdateUser, arg.Username, arg.Userlevel, arg.Notes)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Userlevel,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
