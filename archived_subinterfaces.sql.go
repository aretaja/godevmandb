// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: archived_subinterfaces.sql

package godevmandb

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

const CountArchivedSubinterfaces = `-- name: CountArchivedSubinterfaces :one
SELECT COUNT(*)
FROM archived_subinterfaces
`

func (q *Queries) CountArchivedSubinterfaces(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountArchivedSubinterfaces)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateArchivedSubinterface = `-- name: CreateArchivedSubinterface :one
INSERT INTO archived_subinterfaces (
    ifindex,
    descr,
    parent_descr,
    alias,
    type,
    mac,
    hostname,
    host_ip4,
    host_ip6,
    notes
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
  )
RETURNING sifa_id, ifindex, descr, parent_descr, alias, type, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
`

type CreateArchivedSubinterfaceParams struct {
	Ifindex     *int64         `json:"ifindex"`
	Descr       string         `json:"descr"`
	ParentDescr *string        `json:"parent_descr"`
	Alias       *string        `json:"alias"`
	Type        *string        `json:"type"`
	Mac         pgtype.Macaddr `json:"mac"`
	Hostname    string         `json:"hostname"`
	HostIp4     pgtype.Inet    `json:"host_ip4"`
	HostIp6     pgtype.Inet    `json:"host_ip6"`
	Notes       *string        `json:"notes"`
}

func (q *Queries) CreateArchivedSubinterface(ctx context.Context, arg CreateArchivedSubinterfaceParams) (ArchivedSubinterface, error) {
	row := q.db.QueryRow(ctx, CreateArchivedSubinterface,
		arg.Ifindex,
		arg.Descr,
		arg.ParentDescr,
		arg.Alias,
		arg.Type,
		arg.Mac,
		arg.Hostname,
		arg.HostIp4,
		arg.HostIp6,
		arg.Notes,
	)
	var i ArchivedSubinterface
	err := row.Scan(
		&i.SifaID,
		&i.Ifindex,
		&i.Descr,
		&i.ParentDescr,
		&i.Alias,
		&i.Type,
		&i.Mac,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteArchivedSubinterface = `-- name: DeleteArchivedSubinterface :exec
DELETE FROM archived_subinterfaces
WHERE sifa_id = $1
`

func (q *Queries) DeleteArchivedSubinterface(ctx context.Context, sifaID int64) error {
	_, err := q.db.Exec(ctx, DeleteArchivedSubinterface, sifaID)
	return err
}

const GetArchivedSubinterface = `-- name: GetArchivedSubinterface :one
SELECT sifa_id, ifindex, descr, parent_descr, alias, type, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
FROM archived_subinterfaces
WHERE sifa_id = $1
`

func (q *Queries) GetArchivedSubinterface(ctx context.Context, sifaID int64) (ArchivedSubinterface, error) {
	row := q.db.QueryRow(ctx, GetArchivedSubinterface, sifaID)
	var i ArchivedSubinterface
	err := row.Scan(
		&i.SifaID,
		&i.Ifindex,
		&i.Descr,
		&i.ParentDescr,
		&i.Alias,
		&i.Type,
		&i.Mac,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetArchivedSubinterfaces = `-- name: GetArchivedSubinterfaces :many
SELECT sifa_id, ifindex, descr, parent_descr, alias, type, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
FROM archived_subinterfaces
WHERE (
    $1::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on >= $1
  )
  AND (
    $2::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on <= $2
  )
  AND (
    $3::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on >= $3
  )
  AND (
    $4::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on <= $4
  )
  AND (
    $5::text IS NULL
    OR CAST(ifindex AS text) LIKE $5
  )
  AND (
    $6::text = ''
    OR hostname ILIKE $6
  )
  AND (
    $7::inet IS NULL
    OR host_ip4 <<= $7
  )
  AND (
    $8::inet IS NULL
    OR host_ip6 <<= $8
  )
  AND (
    $9::text = ''
    OR descr ILIKE $9
  )
  AND (
    $10::text IS NULL
    OR alias ILIKE $10
  )
  AND (
    $11::macaddr IS NULL
    OR mac = $11
  )
ORDER BY created_on
LIMIT NULLIF($13::int, 0) OFFSET NULLIF($12::int, 0)
`

type GetArchivedSubinterfacesParams struct {
	UpdatedGe time.Time      `json:"updated_ge"`
	UpdatedLe time.Time      `json:"updated_le"`
	CreatedGe time.Time      `json:"created_ge"`
	CreatedLe time.Time      `json:"created_le"`
	IfindexF  *string        `json:"ifindex_f"`
	HostnameF string         `json:"hostname_f"`
	HostIp4F  pgtype.Inet    `json:"host_ip4_f"`
	HostIp6F  pgtype.Inet    `json:"host_ip6_f"`
	DescrF    string         `json:"descr_f"`
	AliasF    *string        `json:"alias_f"`
	MacF      pgtype.Macaddr `json:"mac_f"`
	OffsetQ   int32          `json:"offset_q"`
	LimitQ    int32          `json:"limit_q"`
}

func (q *Queries) GetArchivedSubinterfaces(ctx context.Context, arg GetArchivedSubinterfacesParams) ([]ArchivedSubinterface, error) {
	rows, err := q.db.Query(ctx, GetArchivedSubinterfaces,
		arg.UpdatedGe,
		arg.UpdatedLe,
		arg.CreatedGe,
		arg.CreatedLe,
		arg.IfindexF,
		arg.HostnameF,
		arg.HostIp4F,
		arg.HostIp6F,
		arg.DescrF,
		arg.AliasF,
		arg.MacF,
		arg.OffsetQ,
		arg.LimitQ,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArchivedSubinterface
	for rows.Next() {
		var i ArchivedSubinterface
		if err := rows.Scan(
			&i.SifaID,
			&i.Ifindex,
			&i.Descr,
			&i.ParentDescr,
			&i.Alias,
			&i.Type,
			&i.Mac,
			&i.Hostname,
			&i.HostIp4,
			&i.HostIp6,
			&i.Notes,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateArchivedSubinterface = `-- name: UpdateArchivedSubinterface :one
UPDATE archived_subinterfaces
SET ifindex = $2,
  descr = $3,
  parent_descr = $4,
  alias = $5,
  type = $6,
  mac = $7,
  hostname = $8,
  host_ip4 = $9,
  host_ip6 = $10,
  notes = $11
WHERE sifa_id = $1
RETURNING sifa_id, ifindex, descr, parent_descr, alias, type, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
`

type UpdateArchivedSubinterfaceParams struct {
	SifaID      int64          `json:"sifa_id"`
	Ifindex     *int64         `json:"ifindex"`
	Descr       string         `json:"descr"`
	ParentDescr *string        `json:"parent_descr"`
	Alias       *string        `json:"alias"`
	Type        *string        `json:"type"`
	Mac         pgtype.Macaddr `json:"mac"`
	Hostname    string         `json:"hostname"`
	HostIp4     pgtype.Inet    `json:"host_ip4"`
	HostIp6     pgtype.Inet    `json:"host_ip6"`
	Notes       *string        `json:"notes"`
}

func (q *Queries) UpdateArchivedSubinterface(ctx context.Context, arg UpdateArchivedSubinterfaceParams) (ArchivedSubinterface, error) {
	row := q.db.QueryRow(ctx, UpdateArchivedSubinterface,
		arg.SifaID,
		arg.Ifindex,
		arg.Descr,
		arg.ParentDescr,
		arg.Alias,
		arg.Type,
		arg.Mac,
		arg.Hostname,
		arg.HostIp4,
		arg.HostIp6,
		arg.Notes,
	)
	var i ArchivedSubinterface
	err := row.Scan(
		&i.SifaID,
		&i.Ifindex,
		&i.Descr,
		&i.ParentDescr,
		&i.Alias,
		&i.Type,
		&i.Mac,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
