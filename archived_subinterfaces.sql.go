// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: archived_subinterfaces.sql

package godevmandb

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const CountArchivedSubInterfaces = `-- name: CountArchivedSubInterfaces :one
SELECT COUNT(*)
FROM archived_subinterfaces
`

func (q *Queries) CountArchivedSubInterfaces(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountArchivedSubInterfaces)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateArchivedSubInterface = `-- name: CreateArchivedSubInterface :one
INSERT INTO archived_subinterfaces (
    ifindex,
    descr,
    parent_descr,
    alias,
    type_enum,
    mac,
    hostname,
    host_ip4,
    host_ip6,
    notes
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
  )
RETURNING sifa_id, ifindex, descr, parent_descr, alias, type_enum, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
`

type CreateArchivedSubInterfaceParams struct {
	Ifindex     sql.NullInt64  `json:"ifindex"`
	Descr       string         `json:"descr"`
	ParentDescr sql.NullString `json:"parent_descr"`
	Alias       sql.NullString `json:"alias"`
	TypeEnum    sql.NullString `json:"type_enum"`
	Mac         pgtype.Macaddr `json:"mac"`
	Hostname    string         `json:"hostname"`
	HostIp4     pgtype.Inet    `json:"host_ip4"`
	HostIp6     pgtype.Inet    `json:"host_ip6"`
	Notes       sql.NullString `json:"notes"`
}

func (q *Queries) CreateArchivedSubInterface(ctx context.Context, arg CreateArchivedSubInterfaceParams) (ArchivedSubinterface, error) {
	row := q.db.QueryRow(ctx, CreateArchivedSubInterface,
		arg.Ifindex,
		arg.Descr,
		arg.ParentDescr,
		arg.Alias,
		arg.TypeEnum,
		arg.Mac,
		arg.Hostname,
		arg.HostIp4,
		arg.HostIp6,
		arg.Notes,
	)
	var i ArchivedSubinterface
	err := row.Scan(
		&i.SifaID,
		&i.Ifindex,
		&i.Descr,
		&i.ParentDescr,
		&i.Alias,
		&i.TypeEnum,
		&i.Mac,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteArchivedSubInterface = `-- name: DeleteArchivedSubInterface :exec
DELETE FROM archived_subinterfaces
WHERE sifa_id = $1
`

func (q *Queries) DeleteArchivedSubInterface(ctx context.Context, sifaID int64) error {
	_, err := q.db.Exec(ctx, DeleteArchivedSubInterface, sifaID)
	return err
}

const GetArchivedSubInterface = `-- name: GetArchivedSubInterface :one
SELECT sifa_id, ifindex, descr, parent_descr, alias, type_enum, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
FROM archived_subinterfaces
WHERE sifa_id = $1
`

func (q *Queries) GetArchivedSubInterface(ctx context.Context, sifaID int64) (ArchivedSubinterface, error) {
	row := q.db.QueryRow(ctx, GetArchivedSubInterface, sifaID)
	var i ArchivedSubinterface
	err := row.Scan(
		&i.SifaID,
		&i.Ifindex,
		&i.Descr,
		&i.ParentDescr,
		&i.Alias,
		&i.TypeEnum,
		&i.Mac,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetArchivedSubInterfaces = `-- name: GetArchivedSubInterfaces :many
SELECT sifa_id, ifindex, descr, parent_descr, alias, type_enum, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
FROM archived_subinterfaces
ORDER BY descr
LIMIT $1
OFFSET $2
`

type GetArchivedSubInterfacesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetArchivedSubInterfaces(ctx context.Context, arg GetArchivedSubInterfacesParams) ([]ArchivedSubinterface, error) {
	rows, err := q.db.Query(ctx, GetArchivedSubInterfaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArchivedSubinterface
	for rows.Next() {
		var i ArchivedSubinterface
		if err := rows.Scan(
			&i.SifaID,
			&i.Ifindex,
			&i.Descr,
			&i.ParentDescr,
			&i.Alias,
			&i.TypeEnum,
			&i.Mac,
			&i.Hostname,
			&i.HostIp4,
			&i.HostIp6,
			&i.Notes,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateArchivedSubInterface = `-- name: UpdateArchivedSubInterface :one
UPDATE archived_subinterfaces
SET ifindex = $2,
  descr = $3,
  parent_descr = $4,
  alias = $5,
  type_enum = $6,
  mac = $7,
  hostname = $8,
  host_ip4 = $9,
  host_ip6 = $10,
  notes = $11
WHERE sifa_id = $1
RETURNING sifa_id, ifindex, descr, parent_descr, alias, type_enum, mac, hostname, host_ip4, host_ip6, notes, updated_on, created_on
`

type UpdateArchivedSubInterfaceParams struct {
	SifaID      int64          `json:"sifa_id"`
	Ifindex     sql.NullInt64  `json:"ifindex"`
	Descr       string         `json:"descr"`
	ParentDescr sql.NullString `json:"parent_descr"`
	Alias       sql.NullString `json:"alias"`
	TypeEnum    sql.NullString `json:"type_enum"`
	Mac         pgtype.Macaddr `json:"mac"`
	Hostname    string         `json:"hostname"`
	HostIp4     pgtype.Inet    `json:"host_ip4"`
	HostIp6     pgtype.Inet    `json:"host_ip6"`
	Notes       sql.NullString `json:"notes"`
}

func (q *Queries) UpdateArchivedSubInterface(ctx context.Context, arg UpdateArchivedSubInterfaceParams) (ArchivedSubinterface, error) {
	row := q.db.QueryRow(ctx, UpdateArchivedSubInterface,
		arg.SifaID,
		arg.Ifindex,
		arg.Descr,
		arg.ParentDescr,
		arg.Alias,
		arg.TypeEnum,
		arg.Mac,
		arg.Hostname,
		arg.HostIp4,
		arg.HostIp6,
		arg.Notes,
	)
	var i ArchivedSubinterface
	err := row.Scan(
		&i.SifaID,
		&i.Ifindex,
		&i.Descr,
		&i.ParentDescr,
		&i.Alias,
		&i.TypeEnum,
		&i.Mac,
		&i.Hostname,
		&i.HostIp4,
		&i.HostIp6,
		&i.Notes,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
