// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: device_classes.sql

package godevmandb

import (
	"context"
	"time"
)

const CountDeviceClasses = `-- name: CountDeviceClasses :one
SELECT COUNT(*)
FROM device_classes
`

func (q *Queries) CountDeviceClasses(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountDeviceClasses)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateDeviceClass = `-- name: CreateDeviceClass :one
INSERT INTO device_classes (descr)
VALUES ($1)
RETURNING class_id, descr, updated_on, created_on
`

func (q *Queries) CreateDeviceClass(ctx context.Context, descr string) (DeviceClass, error) {
	row := q.db.QueryRow(ctx, CreateDeviceClass, descr)
	var i DeviceClass
	err := row.Scan(
		&i.ClassID,
		&i.Descr,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const DeleteDeviceClass = `-- name: DeleteDeviceClass :exec
DELETE FROM device_classes
WHERE class_id = $1
`

func (q *Queries) DeleteDeviceClass(ctx context.Context, classID int64) error {
	_, err := q.db.Exec(ctx, DeleteDeviceClass, classID)
	return err
}

const GetDeviceClass = `-- name: GetDeviceClass :one
SELECT class_id, descr, updated_on, created_on
FROM device_classes
WHERE class_id = $1
`

func (q *Queries) GetDeviceClass(ctx context.Context, classID int64) (DeviceClass, error) {
	row := q.db.QueryRow(ctx, GetDeviceClass, classID)
	var i DeviceClass
	err := row.Scan(
		&i.ClassID,
		&i.Descr,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}

const GetDeviceClassDeviceTypes = `-- name: GetDeviceClassDeviceTypes :many
SELECT sys_id, class_id, manufacturer, model, hc, snmp_ver, updated_on, created_on
FROM device_types
WHERE class_id = $1
ORDER BY manufacturer,
  model
`

// Relations
func (q *Queries) GetDeviceClassDeviceTypes(ctx context.Context, classID int64) ([]DeviceType, error) {
	rows, err := q.db.Query(ctx, GetDeviceClassDeviceTypes, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceType
	for rows.Next() {
		var i DeviceType
		if err := rows.Scan(
			&i.SysID,
			&i.ClassID,
			&i.Manufacturer,
			&i.Model,
			&i.Hc,
			&i.SnmpVer,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDeviceClasses = `-- name: GetDeviceClasses :many
SELECT class_id, descr, updated_on, created_on
FROM device_classes
WHERE (
    $1::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on >= $1
  )
  AND (
    $2::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR updated_on <= $2
  )
  AND (
    $3::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on >= $3
  )
  AND (
    $4::TIMESTAMPTZ = '0001-01-01 00:00:00+00'
    OR created_on <= $4
  )
  AND (
    $5::text = ''
    OR descr LIKE $5
  )
ORDER BY created_on
LIMIT NULLIF($7::int, 0) OFFSET NULLIF($6::int, 0)
`

type GetDeviceClassesParams struct {
	UpdatedGe time.Time `json:"updated_ge"`
	UpdatedLe time.Time `json:"updated_le"`
	CreatedGe time.Time `json:"created_ge"`
	CreatedLe time.Time `json:"created_le"`
	DescrF    string    `json:"descr_f"`
	OffsetQ   int32     `json:"offset_q"`
	LimitQ    int32     `json:"limit_q"`
}

func (q *Queries) GetDeviceClasses(ctx context.Context, arg GetDeviceClassesParams) ([]DeviceClass, error) {
	rows, err := q.db.Query(ctx, GetDeviceClasses,
		arg.UpdatedGe,
		arg.UpdatedLe,
		arg.CreatedGe,
		arg.CreatedLe,
		arg.DescrF,
		arg.OffsetQ,
		arg.LimitQ,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceClass
	for rows.Next() {
		var i DeviceClass
		if err := rows.Scan(
			&i.ClassID,
			&i.Descr,
			&i.UpdatedOn,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateDeviceClass = `-- name: UpdateDeviceClass :one
UPDATE device_classes
SET descr = $2
WHERE class_id = $1
RETURNING class_id, descr, updated_on, created_on
`

type UpdateDeviceClassParams struct {
	ClassID int64  `json:"class_id"`
	Descr   string `json:"descr"`
}

func (q *Queries) UpdateDeviceClass(ctx context.Context, arg UpdateDeviceClassParams) (DeviceClass, error) {
	row := q.db.QueryRow(ctx, UpdateDeviceClass, arg.ClassID, arg.Descr)
	var i DeviceClass
	err := row.Scan(
		&i.ClassID,
		&i.Descr,
		&i.UpdatedOn,
		&i.CreatedOn,
	)
	return i, err
}
